Terminals unused in grammar

   DEF


Rules useless in parser due to conflicts

    8 $@2: %empty

   10 $@3: %empty


State 6 conflicts: 1 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: ID MK_SEMICOLON $@1 program_body END ID

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt

    4 opt_decl_list: decl_list
    5              | %empty

    6 decl_list: decl_list decl
    7          | decl

    8 $@2: %empty

    9 decl: VAR $@2 id_list MK_COLON scalar_type MK_SEMICOLON

   10 $@3: %empty

   11 decl: VAR $@3 id_list MK_COLON array_type MK_SEMICOLON
   12     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   13 int_const: INT_CONST
   14          | OCTAL_CONST

   15 literal_const: int_const
   16              | OP_SUB int_const
   17              | FLOAT_CONST
   18              | OP_SUB FLOAT_CONST
   19              | SCIENTIFIC
   20              | OP_SUB SCIENTIFIC
   21              | STR_CONST
   22              | TRUE
   23              | FALSE

   24 opt_func_decl_list: func_decl_list
   25                   | %empty

   26 func_decl_list: func_decl_list func_decl
   27               | func_decl

   28 $@4: %empty

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 ID

   30 opt_param_list: param_list
   31               | %empty

   32 param_list: param_list MK_SEMICOLON param
   33           | param

   34 param: id_list MK_COLON type

   35 id_list: id_list MK_COMMA ID
   36        | ID

   37 opt_type: MK_COLON type
   38         | %empty

   39 type: scalar_type
   40     | array_type

   41 scalar_type: INTEGER
   42            | REAL
   43            | BOOLEAN
   44            | STRING

   45 @5: %empty

   46 array_type: ARRAY @5 int_const TO int_const OF type

   47 stmt: compound_stmt
   48     | simple_stmt
   49     | cond_stmt
   50     | while_stmt
   51     | for_stmt
   52     | return_stmt
   53     | proc_call_stmt

   54 $@6: %empty

   55 compound_stmt: BEG $@6 opt_decl_list opt_stmt_list END

   56 opt_stmt_list: stmt_list
   57              | %empty

   58 stmt_list: stmt_list stmt
   59          | stmt

   60 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   61            | PRINT boolean_expr MK_SEMICOLON
   62            | READ boolean_expr MK_SEMICOLON

   63 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   65          | IF boolean_expr THEN opt_stmt_list END IF

   66 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   68 return_stmt: RETURN boolean_expr MK_SEMICOLON

   69 opt_boolean_expr_list: boolean_expr_list
   70                      | %empty

   71 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   72                  | boolean_expr

   73 boolean_expr: boolean_expr OP_OR boolean_term
   74             | boolean_term

   75 boolean_term: boolean_term OP_AND boolean_factor
   76             | boolean_factor

   77 boolean_factor: OP_NOT boolean_factor
   78               | relop_expr

   79 relop_expr: expr rel_op expr
   80           | expr

   81 rel_op: OP_LT
   82       | OP_LE
   83       | OP_EQ
   84       | OP_GE
   85       | OP_GT
   86       | OP_NE

   87 expr: expr add_op term
   88     | term

   89 add_op: OP_ADD
   90       | OP_SUB

   91 term: term mul_op factor
   92     | factor

   93 mul_op: OP_MUL
   94       | OP_DIV
   95       | OP_MOD

   96 factor: var_ref
   97       | OP_SUB var_ref
   98       | MK_LPAREN boolean_expr MK_RPAREN
   99       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
  100       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  101       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  102       | literal_const

  103 var_ref: ID
  104        | var_ref dim

  105 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 46
BEG (259) 55
BOOLEAN (260) 43
DEF (261)
DO (262) 66 67
ELSE (263) 64
END (264) 2 29 55 64 65 66 67
FALSE (265) 23
FOR (266) 67
INTEGER (267) 41
IF (268) 64 65
OF (269) 46
PRINT (270) 61
READ (271) 62
REAL (272) 42
RETURN (273) 68
STRING (274) 44
THEN (275) 64 65
TO (276) 46 67
TRUE (277) 22
VAR (278) 9 11 12
WHILE (279) 66
ID (280) 2 29 35 36 63 67 100 101 103
OCTAL_CONST (281) 14
INT_CONST (282) 13
FLOAT_CONST (283) 17 18
SCIENTIFIC (284) 19 20
STR_CONST (285) 21
OP_ADD (286) 89
OP_SUB (287) 16 18 20 90 97 99 101
OP_MUL (288) 93
OP_DIV (289) 94
OP_MOD (290) 95
OP_ASSIGN (291) 60 67
OP_EQ (292) 83
OP_NE (293) 86
OP_GT (294) 85
OP_LT (295) 81
OP_GE (296) 84
OP_LE (297) 82
OP_AND (298) 75
OP_OR (299) 73
OP_NOT (300) 77
MK_COMMA (301) 35 71
MK_COLON (302) 9 11 12 34 37
MK_SEMICOLON (303) 2 9 11 12 29 32 60 61 62 63 68
MK_LPAREN (304) 29 63 98 99 100 101
MK_RPAREN (305) 29 63 98 99 100 101
MK_LB (306) 105
MK_RB (307) 105


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 2, on right: 0
$@1 (55)
    on left: 1, on right: 2
program_body (56)
    on left: 3, on right: 2
opt_decl_list (57)
    on left: 4 5, on right: 3 55
decl_list (58)
    on left: 6 7, on right: 4 6
decl (59)
    on left: 9 11 12, on right: 6 7
$@2 (60)
    on left: 8, on right: 9
$@3 (61)
    on left: 10, on right: 11
int_const (62)
    on left: 13 14, on right: 15 16 46 67
literal_const (63)
    on left: 15 16 17 18 19 20 21 22 23, on right: 12 102
opt_func_decl_list (64)
    on left: 24 25, on right: 3
func_decl_list (65)
    on left: 26 27, on right: 24 26
func_decl (66)
    on left: 29, on right: 26 27
$@4 (67)
    on left: 28, on right: 29
opt_param_list (68)
    on left: 30 31, on right: 29
param_list (69)
    on left: 32 33, on right: 30 32
param (70)
    on left: 34, on right: 32 33
id_list (71)
    on left: 35 36, on right: 9 11 12 34 35
opt_type (72)
    on left: 37 38, on right: 29
type (73)
    on left: 39 40, on right: 34 37 46
scalar_type (74)
    on left: 41 42 43 44, on right: 9 39
array_type (75)
    on left: 46, on right: 11 40
@5 (76)
    on left: 45, on right: 46
stmt (77)
    on left: 47 48 49 50 51 52 53, on right: 58 59
compound_stmt (78)
    on left: 55, on right: 3 29 47
$@6 (79)
    on left: 54, on right: 55
opt_stmt_list (80)
    on left: 56 57, on right: 55 64 65 66 67
stmt_list (81)
    on left: 58 59, on right: 56 58
simple_stmt (82)
    on left: 60 61 62, on right: 48
proc_call_stmt (83)
    on left: 63, on right: 53
cond_stmt (84)
    on left: 64 65, on right: 49
while_stmt (85)
    on left: 66, on right: 50
for_stmt (86)
    on left: 67, on right: 51
return_stmt (87)
    on left: 68, on right: 52
opt_boolean_expr_list (88)
    on left: 69 70, on right: 63 100 101
boolean_expr_list (89)
    on left: 71 72, on right: 69 71
boolean_expr (90)
    on left: 73 74, on right: 60 61 62 64 65 66 68 71 72 73 98 99 105
boolean_term (91)
    on left: 75 76, on right: 73 74 75
boolean_factor (92)
    on left: 77 78, on right: 75 76 77
relop_expr (93)
    on left: 79 80, on right: 78
rel_op (94)
    on left: 81 82 83 84 85 86, on right: 79
expr (95)
    on left: 87 88, on right: 79 80 87
add_op (96)
    on left: 89 90, on right: 87
term (97)
    on left: 91 92, on right: 87 88 91
mul_op (98)
    on left: 93 94 95, on right: 91
factor (99)
    on left: 96 97 98 99 100 101 102, on right: 91 92
var_ref (100)
    on left: 103 104, on right: 60 96 97 104
dim (101)
    on left: 105, on right: 104


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    2 program: ID . MK_SEMICOLON $@1 program_body END ID

    MK_SEMICOLON  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: ID MK_SEMICOLON . $@1 program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 program: ID MK_SEMICOLON $@1 . program_body END ID

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (opt_decl_list)

    program_body   go to state 7
    opt_decl_list  go to state 8
    decl_list      go to state 9
    decl           go to state 10


State 6

    9 decl: VAR . $@2 id_list MK_COLON scalar_type MK_SEMICOLON
   11     | VAR . $@3 id_list MK_COLON array_type MK_SEMICOLON
   12     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 11

    ID  [reduce using rule 8 ($@2)]
    ID  [reduce using rule 10 ($@3)]

    $@2      go to state 12
    $@3      go to state 13
    id_list  go to state 14


State 7

    2 program: ID MK_SEMICOLON $@1 program_body . END ID

    END  shift, and go to state 15


State 8

    3 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 16

    $default  reduce using rule 25 (opt_func_decl_list)

    opt_func_decl_list  go to state 17
    func_decl_list      go to state 18
    func_decl           go to state 19


State 9

    4 opt_decl_list: decl_list .
    6 decl_list: decl_list . decl

    VAR  shift, and go to state 6

    $default  reduce using rule 4 (opt_decl_list)

    decl  go to state 20


State 10

    7 decl_list: decl .

    $default  reduce using rule 7 (decl_list)


State 11

   36 id_list: ID .

    $default  reduce using rule 36 (id_list)


State 12

    9 decl: VAR $@2 . id_list MK_COLON scalar_type MK_SEMICOLON

    ID  shift, and go to state 11

    id_list  go to state 21


State 13

   11 decl: VAR $@3 . id_list MK_COLON array_type MK_SEMICOLON

    ID  shift, and go to state 11

    id_list  go to state 22


State 14

   12 decl: VAR id_list . MK_COLON literal_const MK_SEMICOLON
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 23
    MK_COLON  shift, and go to state 24


State 15

    2 program: ID MK_SEMICOLON $@1 program_body END . ID

    ID  shift, and go to state 25


State 16

   29 func_decl: ID . MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 ID

    MK_LPAREN  shift, and go to state 26


State 17

    3 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 27

    compound_stmt  go to state 28


State 18

   24 opt_func_decl_list: func_decl_list .
   26 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 16

    $default  reduce using rule 24 (opt_func_decl_list)

    func_decl  go to state 29


State 19

   27 func_decl_list: func_decl .

    $default  reduce using rule 27 (func_decl_list)


State 20

    6 decl_list: decl_list decl .

    $default  reduce using rule 6 (decl_list)


State 21

    9 decl: VAR $@2 id_list . MK_COLON scalar_type MK_SEMICOLON
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 23
    MK_COLON  shift, and go to state 30


State 22

   11 decl: VAR $@3 id_list . MK_COLON array_type MK_SEMICOLON
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 23
    MK_COLON  shift, and go to state 31


State 23

   35 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 32


State 24

   12 decl: VAR id_list MK_COLON . literal_const MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 40

    int_const      go to state 41
    literal_const  go to state 42


State 25

    2 program: ID MK_SEMICOLON $@1 program_body END ID .

    $default  reduce using rule 2 (program)


State 26

   29 func_decl: ID MK_LPAREN . opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 ID

    ID  shift, and go to state 11

    $default  reduce using rule 31 (opt_param_list)

    opt_param_list  go to state 43
    param_list      go to state 44
    param           go to state 45
    id_list         go to state 46


State 27

   55 compound_stmt: BEG . $@6 opt_decl_list opt_stmt_list END

    $default  reduce using rule 54 ($@6)

    $@6  go to state 47


State 28

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 3 (program_body)


State 29

   26 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 26 (func_decl_list)


State 30

    9 decl: VAR $@2 id_list MK_COLON . scalar_type MK_SEMICOLON

    BOOLEAN  shift, and go to state 48
    INTEGER  shift, and go to state 49
    REAL     shift, and go to state 50
    STRING   shift, and go to state 51

    scalar_type  go to state 52


State 31

   11 decl: VAR $@3 id_list MK_COLON . array_type MK_SEMICOLON

    ARRAY  shift, and go to state 53

    array_type  go to state 54


State 32

   35 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 35 (id_list)


State 33

   23 literal_const: FALSE .

    $default  reduce using rule 23 (literal_const)


State 34

   22 literal_const: TRUE .

    $default  reduce using rule 22 (literal_const)


State 35

   14 int_const: OCTAL_CONST .

    $default  reduce using rule 14 (int_const)


State 36

   13 int_const: INT_CONST .

    $default  reduce using rule 13 (int_const)


State 37

   17 literal_const: FLOAT_CONST .

    $default  reduce using rule 17 (literal_const)


State 38

   19 literal_const: SCIENTIFIC .

    $default  reduce using rule 19 (literal_const)


State 39

   21 literal_const: STR_CONST .

    $default  reduce using rule 21 (literal_const)


State 40

   16 literal_const: OP_SUB . int_const
   18              | OP_SUB . FLOAT_CONST
   20              | OP_SUB . SCIENTIFIC

    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 55
    SCIENTIFIC   shift, and go to state 56

    int_const  go to state 57


State 41

   15 literal_const: int_const .

    $default  reduce using rule 15 (literal_const)


State 42

   12 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 58


State 43

   29 func_decl: ID MK_LPAREN opt_param_list . MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 ID

    MK_RPAREN  shift, and go to state 59


State 44

   30 opt_param_list: param_list .
   32 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 60

    $default  reduce using rule 30 (opt_param_list)


State 45

   33 param_list: param .

    $default  reduce using rule 33 (param_list)


State 46

   34 param: id_list . MK_COLON type
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 23
    MK_COLON  shift, and go to state 61


State 47

   55 compound_stmt: BEG $@6 . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (opt_decl_list)

    opt_decl_list  go to state 62
    decl_list      go to state 9
    decl           go to state 10


State 48

   43 scalar_type: BOOLEAN .

    $default  reduce using rule 43 (scalar_type)


State 49

   41 scalar_type: INTEGER .

    $default  reduce using rule 41 (scalar_type)


State 50

   42 scalar_type: REAL .

    $default  reduce using rule 42 (scalar_type)


State 51

   44 scalar_type: STRING .

    $default  reduce using rule 44 (scalar_type)


State 52

    9 decl: VAR $@2 id_list MK_COLON scalar_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 63


State 53

   46 array_type: ARRAY . @5 int_const TO int_const OF type

    $default  reduce using rule 45 (@5)

    @5  go to state 64


State 54

   11 decl: VAR $@3 id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 65


State 55

   18 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 18 (literal_const)


State 56

   20 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 20 (literal_const)


State 57

   16 literal_const: OP_SUB int_const .

    $default  reduce using rule 16 (literal_const)


State 58

   12 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 12 (decl)


State 59

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN . opt_type MK_SEMICOLON compound_stmt END $@4 ID

    MK_COLON  shift, and go to state 66

    $default  reduce using rule 38 (opt_type)

    opt_type  go to state 67


State 60

   32 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 11

    param    go to state 68
    id_list  go to state 46


State 61

   34 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 53
    BOOLEAN  shift, and go to state 48
    INTEGER  shift, and go to state 49
    REAL     shift, and go to state 50
    STRING   shift, and go to state 51

    type         go to state 69
    scalar_type  go to state 70
    array_type   go to state 71


State 62

   55 compound_stmt: BEG $@6 opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 57 (opt_stmt_list)

    stmt            go to state 79
    compound_stmt   go to state 80
    opt_stmt_list   go to state 81
    stmt_list       go to state 82
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 63

    9 decl: VAR $@2 id_list MK_COLON scalar_type MK_SEMICOLON .

    $default  reduce using rule 9 (decl)


State 64

   46 array_type: ARRAY @5 . int_const TO int_const OF type

    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36

    int_const  go to state 90


State 65

   11 decl: VAR $@3 id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 11 (decl)


State 66

   37 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 53
    BOOLEAN  shift, and go to state 48
    INTEGER  shift, and go to state 49
    REAL     shift, and go to state 50
    STRING   shift, and go to state 51

    type         go to state 91
    scalar_type  go to state 70
    array_type   go to state 71


State 67

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type . MK_SEMICOLON compound_stmt END $@4 ID

    MK_SEMICOLON  shift, and go to state 92


State 68

   32 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 32 (param_list)


State 69

   34 param: id_list MK_COLON type .

    $default  reduce using rule 34 (param)


State 70

   39 type: scalar_type .

    $default  reduce using rule 39 (type)


State 71

   40 type: array_type .

    $default  reduce using rule 40 (type)


State 72

   67 for_stmt: FOR . ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 93


State 73

   64 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   65          | IF . boolean_expr THEN opt_stmt_list END IF

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 99
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 74

   61 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 107
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 75

   62 simple_stmt: READ . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 108
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 76

   68 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 109
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 77

   66 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 110
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 78

   63 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  103 var_ref: ID .

    MK_LPAREN  shift, and go to state 111

    $default  reduce using rule 103 (var_ref)


State 79

   59 stmt_list: stmt .

    $default  reduce using rule 59 (stmt_list)


State 80

   47 stmt: compound_stmt .

    $default  reduce using rule 47 (stmt)


State 81

   55 compound_stmt: BEG $@6 opt_decl_list opt_stmt_list . END

    END  shift, and go to state 112


State 82

   56 opt_stmt_list: stmt_list .
   58 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 113
    compound_stmt   go to state 80
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 83

   48 stmt: simple_stmt .

    $default  reduce using rule 48 (stmt)


State 84

   53 stmt: proc_call_stmt .

    $default  reduce using rule 53 (stmt)


State 85

   49 stmt: cond_stmt .

    $default  reduce using rule 49 (stmt)


State 86

   50 stmt: while_stmt .

    $default  reduce using rule 50 (stmt)


State 87

   51 stmt: for_stmt .

    $default  reduce using rule 51 (stmt)


State 88

   52 stmt: return_stmt .

    $default  reduce using rule 52 (stmt)


State 89

   60 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  104 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 114
    MK_LB      shift, and go to state 115

    dim  go to state 116


State 90

   46 array_type: ARRAY @5 int_const . TO int_const OF type

    TO  shift, and go to state 117


State 91

   37 opt_type: MK_COLON type .

    $default  reduce using rule 37 (opt_type)


State 92

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON . compound_stmt END $@4 ID

    BEG  shift, and go to state 27

    compound_stmt  go to state 118


State 93

   67 for_stmt: FOR ID . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 119


State 94

  100 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  103 var_ref: ID .

    MK_LPAREN  shift, and go to state 120

    $default  reduce using rule 103 (var_ref)


State 95

   16 literal_const: OP_SUB . int_const
   18              | OP_SUB . FLOAT_CONST
   20              | OP_SUB . SCIENTIFIC
   97 factor: OP_SUB . var_ref
   99       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  101       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 121
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 55
    SCIENTIFIC   shift, and go to state 56
    MK_LPAREN    shift, and go to state 122

    int_const  go to state 57
    var_ref    go to state 123


State 96

   77 boolean_factor: OP_NOT . boolean_factor

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_factor  go to state 124
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 97

   98 factor: MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 125
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 98

  102 factor: literal_const .

    $default  reduce using rule 102 (factor)


State 99

   64 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   65          | IF boolean_expr . THEN opt_stmt_list END IF
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 126
    OP_OR  shift, and go to state 127


State 100

   74 boolean_expr: boolean_term .
   75 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 128

    $default  reduce using rule 74 (boolean_expr)


State 101

   76 boolean_term: boolean_factor .

    $default  reduce using rule 76 (boolean_term)


State 102

   78 boolean_factor: relop_expr .

    $default  reduce using rule 78 (boolean_factor)


State 103

   79 relop_expr: expr . rel_op expr
   80           | expr .
   87 expr: expr . add_op term

    OP_ADD  shift, and go to state 129
    OP_SUB  shift, and go to state 130
    OP_EQ   shift, and go to state 131
    OP_NE   shift, and go to state 132
    OP_GT   shift, and go to state 133
    OP_LT   shift, and go to state 134
    OP_GE   shift, and go to state 135
    OP_LE   shift, and go to state 136

    $default  reduce using rule 80 (relop_expr)

    rel_op  go to state 137
    add_op  go to state 138


State 104

   88 expr: term .
   91 term: term . mul_op factor

    OP_MUL  shift, and go to state 139
    OP_DIV  shift, and go to state 140
    OP_MOD  shift, and go to state 141

    $default  reduce using rule 88 (expr)

    mul_op  go to state 142


State 105

   92 term: factor .

    $default  reduce using rule 92 (term)


State 106

   96 factor: var_ref .
  104 var_ref: var_ref . dim

    MK_LB  shift, and go to state 115

    $default  reduce using rule 96 (factor)

    dim  go to state 116


State 107

   61 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 127
    MK_SEMICOLON  shift, and go to state 143


State 108

   62 simple_stmt: READ boolean_expr . MK_SEMICOLON
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 127
    MK_SEMICOLON  shift, and go to state 144


State 109

   68 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 127
    MK_SEMICOLON  shift, and go to state 145


State 110

   66 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 146
    OP_OR  shift, and go to state 127


State 111

   63 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    $default  reduce using rule 70 (opt_boolean_expr_list)

    int_const              go to state 41
    literal_const          go to state 98
    opt_boolean_expr_list  go to state 147
    boolean_expr_list      go to state 148
    boolean_expr           go to state 149
    boolean_term           go to state 100
    boolean_factor         go to state 101
    relop_expr             go to state 102
    expr                   go to state 103
    term                   go to state 104
    factor                 go to state 105
    var_ref                go to state 106


State 112

   55 compound_stmt: BEG $@6 opt_decl_list opt_stmt_list END .

    $default  reduce using rule 55 (compound_stmt)


State 113

   58 stmt_list: stmt_list stmt .

    $default  reduce using rule 58 (stmt_list)


State 114

   60 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 150
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 115

  105 dim: MK_LB . boolean_expr MK_RB

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 151
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 116

  104 var_ref: var_ref dim .

    $default  reduce using rule 104 (var_ref)


State 117

   46 array_type: ARRAY @5 int_const TO . int_const OF type

    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36

    int_const  go to state 152


State 118

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt . END $@4 ID

    END  shift, and go to state 153


State 119

   67 for_stmt: FOR ID OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36

    int_const  go to state 154


State 120

  100 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    $default  reduce using rule 70 (opt_boolean_expr_list)

    int_const              go to state 41
    literal_const          go to state 98
    opt_boolean_expr_list  go to state 155
    boolean_expr_list      go to state 148
    boolean_expr           go to state 149
    boolean_term           go to state 100
    boolean_factor         go to state 101
    relop_expr             go to state 102
    expr                   go to state 103
    term                   go to state 104
    factor                 go to state 105
    var_ref                go to state 106


State 121

  101 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  103 var_ref: ID .

    MK_LPAREN  shift, and go to state 156

    $default  reduce using rule 103 (var_ref)


State 122

   99 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 157
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 123

   97 factor: OP_SUB var_ref .
  104 var_ref: var_ref . dim

    MK_LB  shift, and go to state 115

    $default  reduce using rule 97 (factor)

    dim  go to state 116


State 124

   77 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 77 (boolean_factor)


State 125

   73 boolean_expr: boolean_expr . OP_OR boolean_term
   98 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 127
    MK_RPAREN  shift, and go to state 158


State 126

   64 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   65          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 57 (opt_stmt_list)

    stmt            go to state 79
    compound_stmt   go to state 80
    opt_stmt_list   go to state 159
    stmt_list       go to state 82
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 127

   73 boolean_expr: boolean_expr OP_OR . boolean_term

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_term    go to state 160
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 128

   75 boolean_term: boolean_term OP_AND . boolean_factor

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_factor  go to state 161
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 129

   89 add_op: OP_ADD .

    $default  reduce using rule 89 (add_op)


State 130

   90 add_op: OP_SUB .

    $default  reduce using rule 90 (add_op)


State 131

   83 rel_op: OP_EQ .

    $default  reduce using rule 83 (rel_op)


State 132

   86 rel_op: OP_NE .

    $default  reduce using rule 86 (rel_op)


State 133

   85 rel_op: OP_GT .

    $default  reduce using rule 85 (rel_op)


State 134

   81 rel_op: OP_LT .

    $default  reduce using rule 81 (rel_op)


State 135

   84 rel_op: OP_GE .

    $default  reduce using rule 84 (rel_op)


State 136

   82 rel_op: OP_LE .

    $default  reduce using rule 82 (rel_op)


State 137

   79 relop_expr: expr rel_op . expr

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    MK_LPAREN    shift, and go to state 97

    int_const      go to state 41
    literal_const  go to state 98
    expr           go to state 162
    term           go to state 104
    factor         go to state 105
    var_ref        go to state 106


State 138

   87 expr: expr add_op . term

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    MK_LPAREN    shift, and go to state 97

    int_const      go to state 41
    literal_const  go to state 98
    term           go to state 163
    factor         go to state 105
    var_ref        go to state 106


State 139

   93 mul_op: OP_MUL .

    $default  reduce using rule 93 (mul_op)


State 140

   94 mul_op: OP_DIV .

    $default  reduce using rule 94 (mul_op)


State 141

   95 mul_op: OP_MOD .

    $default  reduce using rule 95 (mul_op)


State 142

   91 term: term mul_op . factor

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    MK_LPAREN    shift, and go to state 97

    int_const      go to state 41
    literal_const  go to state 98
    factor         go to state 164
    var_ref        go to state 106


State 143

   61 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 61 (simple_stmt)


State 144

   62 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 62 (simple_stmt)


State 145

   68 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 68 (return_stmt)


State 146

   66 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 57 (opt_stmt_list)

    stmt            go to state 79
    compound_stmt   go to state 80
    opt_stmt_list   go to state 165
    stmt_list       go to state 82
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 147

   63 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 166


State 148

   69 opt_boolean_expr_list: boolean_expr_list .
   71 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 167

    $default  reduce using rule 69 (opt_boolean_expr_list)


State 149

   72 boolean_expr_list: boolean_expr .
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 127

    $default  reduce using rule 72 (boolean_expr_list)


State 150

   60 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 127
    MK_SEMICOLON  shift, and go to state 168


State 151

   73 boolean_expr: boolean_expr . OP_OR boolean_term
  105 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 127
    MK_RB  shift, and go to state 169


State 152

   46 array_type: ARRAY @5 int_const TO int_const . OF type

    OF  shift, and go to state 170


State 153

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END . $@4 ID

    $default  reduce using rule 28 ($@4)

    $@4  go to state 171


State 154

   67 for_stmt: FOR ID OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 172


State 155

  100 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 173


State 156

  101 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    $default  reduce using rule 70 (opt_boolean_expr_list)

    int_const              go to state 41
    literal_const          go to state 98
    opt_boolean_expr_list  go to state 174
    boolean_expr_list      go to state 148
    boolean_expr           go to state 149
    boolean_term           go to state 100
    boolean_factor         go to state 101
    relop_expr             go to state 102
    expr                   go to state 103
    term                   go to state 104
    factor                 go to state 105
    var_ref                go to state 106


State 157

   73 boolean_expr: boolean_expr . OP_OR boolean_term
   99 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 127
    MK_RPAREN  shift, and go to state 175


State 158

   98 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 98 (factor)


State 159

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   65          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 176
    END   shift, and go to state 177


State 160

   73 boolean_expr: boolean_expr OP_OR boolean_term .
   75 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 128

    $default  reduce using rule 73 (boolean_expr)


State 161

   75 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 75 (boolean_term)


State 162

   79 relop_expr: expr rel_op expr .
   87 expr: expr . add_op term

    OP_ADD  shift, and go to state 129
    OP_SUB  shift, and go to state 130

    $default  reduce using rule 79 (relop_expr)

    add_op  go to state 138


State 163

   87 expr: expr add_op term .
   91 term: term . mul_op factor

    OP_MUL  shift, and go to state 139
    OP_DIV  shift, and go to state 140
    OP_MOD  shift, and go to state 141

    $default  reduce using rule 87 (expr)

    mul_op  go to state 142


State 164

   91 term: term mul_op factor .

    $default  reduce using rule 91 (term)


State 165

   66 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 178


State 166

   63 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 179


State 167

   71 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    FALSE        shift, and go to state 33
    TRUE         shift, and go to state 34
    ID           shift, and go to state 94
    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39
    OP_SUB       shift, and go to state 95
    OP_NOT       shift, and go to state 96
    MK_LPAREN    shift, and go to state 97

    int_const       go to state 41
    literal_const   go to state 98
    boolean_expr    go to state 180
    boolean_term    go to state 100
    boolean_factor  go to state 101
    relop_expr      go to state 102
    expr            go to state 103
    term            go to state 104
    factor          go to state 105
    var_ref         go to state 106


State 168

   60 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 60 (simple_stmt)


State 169

  105 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 105 (dim)


State 170

   46 array_type: ARRAY @5 int_const TO int_const OF . type

    ARRAY    shift, and go to state 53
    BOOLEAN  shift, and go to state 48
    INTEGER  shift, and go to state 49
    REAL     shift, and go to state 50
    STRING   shift, and go to state 51

    type         go to state 181
    scalar_type  go to state 70
    array_type   go to state 71


State 171

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 . ID

    ID  shift, and go to state 182


State 172

   67 for_stmt: FOR ID OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 35
    INT_CONST    shift, and go to state 36

    int_const  go to state 183


State 173

  100 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 100 (factor)


State 174

  101 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 184


State 175

   99 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 99 (factor)


State 176

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 57 (opt_stmt_list)

    stmt            go to state 79
    compound_stmt   go to state 80
    opt_stmt_list   go to state 185
    stmt_list       go to state 82
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 177

   65 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 186


State 178

   66 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 187


State 179

   63 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 63 (proc_call_stmt)


State 180

   71 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   73 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 127

    $default  reduce using rule 71 (boolean_expr_list)


State 181

   46 array_type: ARRAY @5 int_const TO int_const OF type .

    $default  reduce using rule 46 (array_type)


State 182

   29 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@4 ID .

    $default  reduce using rule 29 (func_decl)


State 183

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 188


State 184

  101 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 101 (factor)


State 185

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 189


State 186

   65 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 65 (cond_stmt)


State 187

   66 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 66 (while_stmt)


State 188

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 27
    FOR     shift, and go to state 72
    IF      shift, and go to state 73
    PRINT   shift, and go to state 74
    READ    shift, and go to state 75
    RETURN  shift, and go to state 76
    WHILE   shift, and go to state 77
    ID      shift, and go to state 78

    $default  reduce using rule 57 (opt_stmt_list)

    stmt            go to state 79
    compound_stmt   go to state 80
    opt_stmt_list   go to state 190
    stmt_list       go to state 82
    simple_stmt     go to state 83
    proc_call_stmt  go to state 84
    cond_stmt       go to state 85
    while_stmt      go to state 86
    for_stmt        go to state 87
    return_stmt     go to state 88
    var_ref         go to state 89


State 189

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 191


State 190

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 192


State 191

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 64 (cond_stmt)


State 192

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 193


State 193

   67 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 67 (for_stmt)
