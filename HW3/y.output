Terminals unused in grammar

   DEF


Rules useless in parser due to conflicts

   10 $@4: %empty

   13 $@6: %empty


State 7 conflicts: 1 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END ID

    4 program_body: opt_decl_list opt_func_decl_list compound_stmt

    5 opt_decl_list: decl_list
    6              | %empty

    7 $@3: %empty

    8 decl_list: decl_list $@3 decl
    9          | decl

   10 $@4: %empty

   11 $@5: %empty

   12 decl: VAR $@4 id_list MK_COLON scalar_type $@5 MK_SEMICOLON

   13 $@6: %empty

   14 decl: VAR $@6 id_list MK_COLON array_type MK_SEMICOLON
   15     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   16 int_const: INT_CONST
   17          | OCTAL_CONST

   18 literal_const: int_const
   19              | OP_SUB int_const
   20              | FLOAT_CONST
   21              | OP_SUB FLOAT_CONST
   22              | SCIENTIFIC
   23              | OP_SUB SCIENTIFIC
   24              | STR_CONST
   25              | TRUE
   26              | FALSE

   27 opt_func_decl_list: func_decl_list
   28                   | %empty

   29 func_decl_list: func_decl_list func_decl
   30               | func_decl

   31 $@7: %empty

   32 $@8: %empty

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID

   34 opt_param_list: param_list
   35               | %empty

   36 param_list: param_list MK_SEMICOLON param
   37           | param

   38 param: id_list MK_COLON type

   39 id_list: id_list MK_COMMA ID
   40        | ID

   41 opt_type: MK_COLON type
   42         | %empty

   43 type: scalar_type
   44     | array_type

   45 scalar_type: INTEGER
   46            | REAL
   47            | BOOLEAN
   48            | STRING

   49 $@9: %empty

   50 array_type: ARRAY $@9 int_const TO int_const OF type

   51 stmt: compound_stmt
   52     | simple_stmt
   53     | cond_stmt
   54     | while_stmt
   55     | for_stmt
   56     | return_stmt
   57     | proc_call_stmt

   58 $@10: %empty

   59 compound_stmt: BEG $@10 opt_decl_list opt_stmt_list END

   60 opt_stmt_list: stmt_list
   61              | %empty

   62 stmt_list: stmt_list stmt
   63          | stmt

   64 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   65            | PRINT boolean_expr MK_SEMICOLON
   66            | READ boolean_expr MK_SEMICOLON

   67 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   69          | IF boolean_expr THEN opt_stmt_list END IF

   70 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   72 return_stmt: RETURN boolean_expr MK_SEMICOLON

   73 opt_boolean_expr_list: boolean_expr_list
   74                      | %empty

   75 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   76                  | boolean_expr

   77 boolean_expr: boolean_expr OP_OR boolean_term
   78             | boolean_term

   79 boolean_term: boolean_term OP_AND boolean_factor
   80             | boolean_factor

   81 boolean_factor: OP_NOT boolean_factor
   82               | relop_expr

   83 relop_expr: expr rel_op expr
   84           | expr

   85 rel_op: OP_LT
   86       | OP_LE
   87       | OP_EQ
   88       | OP_GE
   89       | OP_GT
   90       | OP_NE

   91 expr: expr add_op term
   92     | term

   93 add_op: OP_ADD
   94       | OP_SUB

   95 term: term mul_op factor
   96     | factor

   97 mul_op: OP_MUL
   98       | OP_DIV
   99       | OP_MOD

  100 factor: var_ref
  101       | OP_SUB var_ref
  102       | MK_LPAREN boolean_expr MK_RPAREN
  103       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
  104       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  105       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  106       | literal_const

  107 var_ref: ID
  108        | var_ref dim

  109 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 50
BEG (259) 59
BOOLEAN (260) 47
DEF (261)
DO (262) 70 71
ELSE (263) 68
END (264) 3 33 59 68 69 70 71
FALSE (265) 26
FOR (266) 71
INTEGER (267) 45
IF (268) 68 69
OF (269) 50
PRINT (270) 65
READ (271) 66
REAL (272) 46
RETURN (273) 72
STRING (274) 48
THEN (275) 68 69
TO (276) 50 71
TRUE (277) 25
VAR (278) 12 14 15
WHILE (279) 70
ID (280) 3 33 39 40 67 71 104 105 107
OCTAL_CONST (281) 17
INT_CONST (282) 16
FLOAT_CONST (283) 20 21
SCIENTIFIC (284) 22 23
STR_CONST (285) 24
OP_ADD (286) 93
OP_SUB (287) 19 21 23 94 101 103 105
OP_MUL (288) 97
OP_DIV (289) 98
OP_MOD (290) 99
OP_ASSIGN (291) 64 71
OP_EQ (292) 87
OP_NE (293) 90
OP_GT (294) 89
OP_LT (295) 85
OP_GE (296) 88
OP_LE (297) 86
OP_AND (298) 79
OP_OR (299) 77
OP_NOT (300) 81
MK_COMMA (301) 39 75
MK_COLON (302) 12 14 15 38 41
MK_SEMICOLON (303) 3 12 14 15 33 36 64 65 66 67 72
MK_LPAREN (304) 33 67 102 103 104 105
MK_RPAREN (305) 33 67 102 103 104 105
MK_LB (306) 109
MK_RB (307) 109


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 3, on right: 0
$@1 (55)
    on left: 1, on right: 3
$@2 (56)
    on left: 2, on right: 3
program_body (57)
    on left: 4, on right: 3
opt_decl_list (58)
    on left: 5 6, on right: 4 59
decl_list (59)
    on left: 8 9, on right: 5 8
$@3 (60)
    on left: 7, on right: 8
decl (61)
    on left: 12 14 15, on right: 8 9
$@4 (62)
    on left: 10, on right: 12
$@5 (63)
    on left: 11, on right: 12
$@6 (64)
    on left: 13, on right: 14
int_const (65)
    on left: 16 17, on right: 18 19 50 71
literal_const (66)
    on left: 18 19 20 21 22 23 24 25 26, on right: 15 106
opt_func_decl_list (67)
    on left: 27 28, on right: 4
func_decl_list (68)
    on left: 29 30, on right: 27 29
func_decl (69)
    on left: 33, on right: 29 30
$@7 (70)
    on left: 31, on right: 33
$@8 (71)
    on left: 32, on right: 33
opt_param_list (72)
    on left: 34 35, on right: 33
param_list (73)
    on left: 36 37, on right: 34 36
param (74)
    on left: 38, on right: 36 37
id_list (75)
    on left: 39 40, on right: 12 14 15 38 39
opt_type (76)
    on left: 41 42, on right: 33
type (77)
    on left: 43 44, on right: 38 41 50
scalar_type (78)
    on left: 45 46 47 48, on right: 12 43
array_type (79)
    on left: 50, on right: 14 44
$@9 (80)
    on left: 49, on right: 50
stmt (81)
    on left: 51 52 53 54 55 56 57, on right: 62 63
compound_stmt (82)
    on left: 59, on right: 4 33 51
$@10 (83)
    on left: 58, on right: 59
opt_stmt_list (84)
    on left: 60 61, on right: 59 68 69 70 71
stmt_list (85)
    on left: 62 63, on right: 60 62
simple_stmt (86)
    on left: 64 65 66, on right: 52
proc_call_stmt (87)
    on left: 67, on right: 57
cond_stmt (88)
    on left: 68 69, on right: 53
while_stmt (89)
    on left: 70, on right: 54
for_stmt (90)
    on left: 71, on right: 55
return_stmt (91)
    on left: 72, on right: 56
opt_boolean_expr_list (92)
    on left: 73 74, on right: 67 104 105
boolean_expr_list (93)
    on left: 75 76, on right: 73 75
boolean_expr (94)
    on left: 77 78, on right: 64 65 66 68 69 70 72 75 76 77 102 103
    109
boolean_term (95)
    on left: 79 80, on right: 77 78 79
boolean_factor (96)
    on left: 81 82, on right: 79 80 81
relop_expr (97)
    on left: 83 84, on right: 82
rel_op (98)
    on left: 85 86 87 88 89 90, on right: 83
expr (99)
    on left: 91 92, on right: 83 84 91
add_op (100)
    on left: 93 94, on right: 91
term (101)
    on left: 95 96, on right: 91 92 95
mul_op (102)
    on left: 97 98 99, on right: 95
factor (103)
    on left: 100 101 102 103 104 105 106, on right: 95 96
var_ref (104)
    on left: 107 108, on right: 64 100 101 108
dim (105)
    on left: 109, on right: 108


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    3 program: ID . $@1 MK_SEMICOLON $@2 program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    3 program: ID $@1 . MK_SEMICOLON $@2 program_body END ID

    MK_SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    3 program: ID $@1 MK_SEMICOLON . $@2 program_body END ID

    $default  reduce using rule 2 ($@2)

    $@2  go to state 6


State 6

    3 program: ID $@1 MK_SEMICOLON $@2 . program_body END ID

    VAR  shift, and go to state 7

    $default  reduce using rule 6 (opt_decl_list)

    program_body   go to state 8
    opt_decl_list  go to state 9
    decl_list      go to state 10
    decl           go to state 11


State 7

   12 decl: VAR . $@4 id_list MK_COLON scalar_type $@5 MK_SEMICOLON
   14     | VAR . $@6 id_list MK_COLON array_type MK_SEMICOLON
   15     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 12

    ID  [reduce using rule 10 ($@4)]
    ID  [reduce using rule 13 ($@6)]

    $@4      go to state 13
    $@6      go to state 14
    id_list  go to state 15


State 8

    3 program: ID $@1 MK_SEMICOLON $@2 program_body . END ID

    END  shift, and go to state 16


State 9

    4 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 17

    $default  reduce using rule 28 (opt_func_decl_list)

    opt_func_decl_list  go to state 18
    func_decl_list      go to state 19
    func_decl           go to state 20


State 10

    5 opt_decl_list: decl_list .
    8 decl_list: decl_list . $@3 decl

    VAR       reduce using rule 7 ($@3)
    $default  reduce using rule 5 (opt_decl_list)

    $@3  go to state 21


State 11

    9 decl_list: decl .

    $default  reduce using rule 9 (decl_list)


State 12

   40 id_list: ID .

    $default  reduce using rule 40 (id_list)


State 13

   12 decl: VAR $@4 . id_list MK_COLON scalar_type $@5 MK_SEMICOLON

    ID  shift, and go to state 12

    id_list  go to state 22


State 14

   14 decl: VAR $@6 . id_list MK_COLON array_type MK_SEMICOLON

    ID  shift, and go to state 12

    id_list  go to state 23


State 15

   15 decl: VAR id_list . MK_COLON literal_const MK_SEMICOLON
   39 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 25


State 16

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END . ID

    ID  shift, and go to state 26


State 17

   33 func_decl: ID . $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID

    $default  reduce using rule 31 ($@7)

    $@7  go to state 27


State 18

    4 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 28

    compound_stmt  go to state 29


State 19

   27 opt_func_decl_list: func_decl_list .
   29 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 17

    $default  reduce using rule 27 (opt_func_decl_list)

    func_decl  go to state 30


State 20

   30 func_decl_list: func_decl .

    $default  reduce using rule 30 (func_decl_list)


State 21

    8 decl_list: decl_list $@3 . decl

    VAR  shift, and go to state 7

    decl  go to state 31


State 22

   12 decl: VAR $@4 id_list . MK_COLON scalar_type $@5 MK_SEMICOLON
   39 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 32


State 23

   14 decl: VAR $@6 id_list . MK_COLON array_type MK_SEMICOLON
   39 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 33


State 24

   39 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 34


State 25

   15 decl: VAR id_list MK_COLON . literal_const MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 42

    int_const      go to state 43
    literal_const  go to state 44


State 26

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END ID .

    $default  reduce using rule 3 (program)


State 27

   33 func_decl: ID $@7 . MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID

    MK_LPAREN  shift, and go to state 45


State 28

   59 compound_stmt: BEG . $@10 opt_decl_list opt_stmt_list END

    $default  reduce using rule 58 ($@10)

    $@10  go to state 46


State 29

    4 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 4 (program_body)


State 30

   29 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 29 (func_decl_list)


State 31

    8 decl_list: decl_list $@3 decl .

    $default  reduce using rule 8 (decl_list)


State 32

   12 decl: VAR $@4 id_list MK_COLON . scalar_type $@5 MK_SEMICOLON

    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    scalar_type  go to state 51


State 33

   14 decl: VAR $@6 id_list MK_COLON . array_type MK_SEMICOLON

    ARRAY  shift, and go to state 52

    array_type  go to state 53


State 34

   39 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 39 (id_list)


State 35

   26 literal_const: FALSE .

    $default  reduce using rule 26 (literal_const)


State 36

   25 literal_const: TRUE .

    $default  reduce using rule 25 (literal_const)


State 37

   17 int_const: OCTAL_CONST .

    $default  reduce using rule 17 (int_const)


State 38

   16 int_const: INT_CONST .

    $default  reduce using rule 16 (int_const)


State 39

   20 literal_const: FLOAT_CONST .

    $default  reduce using rule 20 (literal_const)


State 40

   22 literal_const: SCIENTIFIC .

    $default  reduce using rule 22 (literal_const)


State 41

   24 literal_const: STR_CONST .

    $default  reduce using rule 24 (literal_const)


State 42

   19 literal_const: OP_SUB . int_const
   21              | OP_SUB . FLOAT_CONST
   23              | OP_SUB . SCIENTIFIC

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 54
    SCIENTIFIC   shift, and go to state 55

    int_const  go to state 56


State 43

   18 literal_const: int_const .

    $default  reduce using rule 18 (literal_const)


State 44

   15 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 57


State 45

   33 func_decl: ID $@7 MK_LPAREN . opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID

    ID  shift, and go to state 12

    $default  reduce using rule 35 (opt_param_list)

    opt_param_list  go to state 58
    param_list      go to state 59
    param           go to state 60
    id_list         go to state 61


State 46

   59 compound_stmt: BEG $@10 . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 7

    $default  reduce using rule 6 (opt_decl_list)

    opt_decl_list  go to state 62
    decl_list      go to state 10
    decl           go to state 11


State 47

   47 scalar_type: BOOLEAN .

    $default  reduce using rule 47 (scalar_type)


State 48

   45 scalar_type: INTEGER .

    $default  reduce using rule 45 (scalar_type)


State 49

   46 scalar_type: REAL .

    $default  reduce using rule 46 (scalar_type)


State 50

   48 scalar_type: STRING .

    $default  reduce using rule 48 (scalar_type)


State 51

   12 decl: VAR $@4 id_list MK_COLON scalar_type . $@5 MK_SEMICOLON

    $default  reduce using rule 11 ($@5)

    $@5  go to state 63


State 52

   50 array_type: ARRAY . $@9 int_const TO int_const OF type

    $default  reduce using rule 49 ($@9)

    $@9  go to state 64


State 53

   14 decl: VAR $@6 id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 65


State 54

   21 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 21 (literal_const)


State 55

   23 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 23 (literal_const)


State 56

   19 literal_const: OP_SUB int_const .

    $default  reduce using rule 19 (literal_const)


State 57

   15 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 15 (decl)


State 58

   33 func_decl: ID $@7 MK_LPAREN opt_param_list . MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID

    MK_RPAREN  shift, and go to state 66


State 59

   34 opt_param_list: param_list .
   36 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 67

    $default  reduce using rule 34 (opt_param_list)


State 60

   37 param_list: param .

    $default  reduce using rule 37 (param_list)


State 61

   38 param: id_list . MK_COLON type
   39 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 68


State 62

   59 compound_stmt: BEG $@10 opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 61 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 78
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 63

   12 decl: VAR $@4 id_list MK_COLON scalar_type $@5 . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 87


State 64

   50 array_type: ARRAY $@9 . int_const TO int_const OF type

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 88


State 65

   14 decl: VAR $@6 id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 14 (decl)


State 66

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN . opt_type MK_SEMICOLON compound_stmt END $@8 ID

    MK_COLON  shift, and go to state 89

    $default  reduce using rule 42 (opt_type)

    opt_type  go to state 90


State 67

   36 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 12

    param    go to state 91
    id_list  go to state 61


State 68

   38 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 92
    scalar_type  go to state 93
    array_type   go to state 94


State 69

   71 for_stmt: FOR . ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 95


State 70

   68 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   69          | IF . boolean_expr THEN opt_stmt_list END IF

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 101
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 71

   65 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 109
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 72

   66 simple_stmt: READ . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 110
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 73

   72 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 111
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 74

   70 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 112
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 75

   67 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  107 var_ref: ID .

    MK_LPAREN  shift, and go to state 113

    $default  reduce using rule 107 (var_ref)


State 76

   63 stmt_list: stmt .

    $default  reduce using rule 63 (stmt_list)


State 77

   51 stmt: compound_stmt .

    $default  reduce using rule 51 (stmt)


State 78

   59 compound_stmt: BEG $@10 opt_decl_list opt_stmt_list . END

    END  shift, and go to state 114


State 79

   60 opt_stmt_list: stmt_list .
   62 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 115
    compound_stmt   go to state 77
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 80

   52 stmt: simple_stmt .

    $default  reduce using rule 52 (stmt)


State 81

   57 stmt: proc_call_stmt .

    $default  reduce using rule 57 (stmt)


State 82

   53 stmt: cond_stmt .

    $default  reduce using rule 53 (stmt)


State 83

   54 stmt: while_stmt .

    $default  reduce using rule 54 (stmt)


State 84

   55 stmt: for_stmt .

    $default  reduce using rule 55 (stmt)


State 85

   56 stmt: return_stmt .

    $default  reduce using rule 56 (stmt)


State 86

   64 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  108 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 116
    MK_LB      shift, and go to state 117

    dim  go to state 118


State 87

   12 decl: VAR $@4 id_list MK_COLON scalar_type $@5 MK_SEMICOLON .

    $default  reduce using rule 12 (decl)


State 88

   50 array_type: ARRAY $@9 int_const . TO int_const OF type

    TO  shift, and go to state 119


State 89

   41 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 120
    scalar_type  go to state 93
    array_type   go to state 94


State 90

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type . MK_SEMICOLON compound_stmt END $@8 ID

    MK_SEMICOLON  shift, and go to state 121


State 91

   36 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 36 (param_list)


State 92

   38 param: id_list MK_COLON type .

    $default  reduce using rule 38 (param)


State 93

   43 type: scalar_type .

    $default  reduce using rule 43 (type)


State 94

   44 type: array_type .

    $default  reduce using rule 44 (type)


State 95

   71 for_stmt: FOR ID . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 122


State 96

  104 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  107 var_ref: ID .

    MK_LPAREN  shift, and go to state 123

    $default  reduce using rule 107 (var_ref)


State 97

   19 literal_const: OP_SUB . int_const
   21              | OP_SUB . FLOAT_CONST
   23              | OP_SUB . SCIENTIFIC
  101 factor: OP_SUB . var_ref
  103       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  105       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 124
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 54
    SCIENTIFIC   shift, and go to state 55
    MK_LPAREN    shift, and go to state 125

    int_const  go to state 56
    var_ref    go to state 126


State 98

   81 boolean_factor: OP_NOT . boolean_factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_factor  go to state 127
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 99

  102 factor: MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 128
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 100

  106 factor: literal_const .

    $default  reduce using rule 106 (factor)


State 101

   68 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   69          | IF boolean_expr . THEN opt_stmt_list END IF
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 129
    OP_OR  shift, and go to state 130


State 102

   78 boolean_expr: boolean_term .
   79 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 131

    $default  reduce using rule 78 (boolean_expr)


State 103

   80 boolean_term: boolean_factor .

    $default  reduce using rule 80 (boolean_term)


State 104

   82 boolean_factor: relop_expr .

    $default  reduce using rule 82 (boolean_factor)


State 105

   83 relop_expr: expr . rel_op expr
   84           | expr .
   91 expr: expr . add_op term

    OP_ADD  shift, and go to state 132
    OP_SUB  shift, and go to state 133
    OP_EQ   shift, and go to state 134
    OP_NE   shift, and go to state 135
    OP_GT   shift, and go to state 136
    OP_LT   shift, and go to state 137
    OP_GE   shift, and go to state 138
    OP_LE   shift, and go to state 139

    $default  reduce using rule 84 (relop_expr)

    rel_op  go to state 140
    add_op  go to state 141


State 106

   92 expr: term .
   95 term: term . mul_op factor

    OP_MUL  shift, and go to state 142
    OP_DIV  shift, and go to state 143
    OP_MOD  shift, and go to state 144

    $default  reduce using rule 92 (expr)

    mul_op  go to state 145


State 107

   96 term: factor .

    $default  reduce using rule 96 (term)


State 108

  100 factor: var_ref .
  108 var_ref: var_ref . dim

    MK_LB  shift, and go to state 117

    $default  reduce using rule 100 (factor)

    dim  go to state 118


State 109

   65 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 130
    MK_SEMICOLON  shift, and go to state 146


State 110

   66 simple_stmt: READ boolean_expr . MK_SEMICOLON
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 130
    MK_SEMICOLON  shift, and go to state 147


State 111

   72 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 130
    MK_SEMICOLON  shift, and go to state 148


State 112

   70 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 149
    OP_OR  shift, and go to state 130


State 113

   67 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    $default  reduce using rule 74 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 100
    opt_boolean_expr_list  go to state 150
    boolean_expr_list      go to state 151
    boolean_expr           go to state 152
    boolean_term           go to state 102
    boolean_factor         go to state 103
    relop_expr             go to state 104
    expr                   go to state 105
    term                   go to state 106
    factor                 go to state 107
    var_ref                go to state 108


State 114

   59 compound_stmt: BEG $@10 opt_decl_list opt_stmt_list END .

    $default  reduce using rule 59 (compound_stmt)


State 115

   62 stmt_list: stmt_list stmt .

    $default  reduce using rule 62 (stmt_list)


State 116

   64 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 153
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 117

  109 dim: MK_LB . boolean_expr MK_RB

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 154
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 118

  108 var_ref: var_ref dim .

    $default  reduce using rule 108 (var_ref)


State 119

   50 array_type: ARRAY $@9 int_const TO . int_const OF type

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 155


State 120

   41 opt_type: MK_COLON type .

    $default  reduce using rule 41 (opt_type)


State 121

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON . compound_stmt END $@8 ID

    BEG  shift, and go to state 28

    compound_stmt  go to state 156


State 122

   71 for_stmt: FOR ID OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 157


State 123

  104 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    $default  reduce using rule 74 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 100
    opt_boolean_expr_list  go to state 158
    boolean_expr_list      go to state 151
    boolean_expr           go to state 152
    boolean_term           go to state 102
    boolean_factor         go to state 103
    relop_expr             go to state 104
    expr                   go to state 105
    term                   go to state 106
    factor                 go to state 107
    var_ref                go to state 108


State 124

  105 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  107 var_ref: ID .

    MK_LPAREN  shift, and go to state 159

    $default  reduce using rule 107 (var_ref)


State 125

  103 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 160
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 126

  101 factor: OP_SUB var_ref .
  108 var_ref: var_ref . dim

    MK_LB  shift, and go to state 117

    $default  reduce using rule 101 (factor)

    dim  go to state 118


State 127

   81 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 81 (boolean_factor)


State 128

   77 boolean_expr: boolean_expr . OP_OR boolean_term
  102 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 130
    MK_RPAREN  shift, and go to state 161


State 129

   68 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   69          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 61 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 162
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 130

   77 boolean_expr: boolean_expr OP_OR . boolean_term

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_term    go to state 163
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 131

   79 boolean_term: boolean_term OP_AND . boolean_factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_factor  go to state 164
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 132

   93 add_op: OP_ADD .

    $default  reduce using rule 93 (add_op)


State 133

   94 add_op: OP_SUB .

    $default  reduce using rule 94 (add_op)


State 134

   87 rel_op: OP_EQ .

    $default  reduce using rule 87 (rel_op)


State 135

   90 rel_op: OP_NE .

    $default  reduce using rule 90 (rel_op)


State 136

   89 rel_op: OP_GT .

    $default  reduce using rule 89 (rel_op)


State 137

   85 rel_op: OP_LT .

    $default  reduce using rule 85 (rel_op)


State 138

   88 rel_op: OP_GE .

    $default  reduce using rule 88 (rel_op)


State 139

   86 rel_op: OP_LE .

    $default  reduce using rule 86 (rel_op)


State 140

   83 relop_expr: expr rel_op . expr

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    MK_LPAREN    shift, and go to state 99

    int_const      go to state 43
    literal_const  go to state 100
    expr           go to state 165
    term           go to state 106
    factor         go to state 107
    var_ref        go to state 108


State 141

   91 expr: expr add_op . term

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    MK_LPAREN    shift, and go to state 99

    int_const      go to state 43
    literal_const  go to state 100
    term           go to state 166
    factor         go to state 107
    var_ref        go to state 108


State 142

   97 mul_op: OP_MUL .

    $default  reduce using rule 97 (mul_op)


State 143

   98 mul_op: OP_DIV .

    $default  reduce using rule 98 (mul_op)


State 144

   99 mul_op: OP_MOD .

    $default  reduce using rule 99 (mul_op)


State 145

   95 term: term mul_op . factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    MK_LPAREN    shift, and go to state 99

    int_const      go to state 43
    literal_const  go to state 100
    factor         go to state 167
    var_ref        go to state 108


State 146

   65 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 65 (simple_stmt)


State 147

   66 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 66 (simple_stmt)


State 148

   72 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 72 (return_stmt)


State 149

   70 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 61 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 168
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 150

   67 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 169


State 151

   73 opt_boolean_expr_list: boolean_expr_list .
   75 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 170

    $default  reduce using rule 73 (opt_boolean_expr_list)


State 152

   76 boolean_expr_list: boolean_expr .
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 130

    $default  reduce using rule 76 (boolean_expr_list)


State 153

   64 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 130
    MK_SEMICOLON  shift, and go to state 171


State 154

   77 boolean_expr: boolean_expr . OP_OR boolean_term
  109 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 130
    MK_RB  shift, and go to state 172


State 155

   50 array_type: ARRAY $@9 int_const TO int_const . OF type

    OF  shift, and go to state 173


State 156

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt . END $@8 ID

    END  shift, and go to state 174


State 157

   71 for_stmt: FOR ID OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 175


State 158

  104 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 176


State 159

  105 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    $default  reduce using rule 74 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 100
    opt_boolean_expr_list  go to state 177
    boolean_expr_list      go to state 151
    boolean_expr           go to state 152
    boolean_term           go to state 102
    boolean_factor         go to state 103
    relop_expr             go to state 104
    expr                   go to state 105
    term                   go to state 106
    factor                 go to state 107
    var_ref                go to state 108


State 160

   77 boolean_expr: boolean_expr . OP_OR boolean_term
  103 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 130
    MK_RPAREN  shift, and go to state 178


State 161

  102 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 102 (factor)


State 162

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   69          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 179
    END   shift, and go to state 180


State 163

   77 boolean_expr: boolean_expr OP_OR boolean_term .
   79 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 131

    $default  reduce using rule 77 (boolean_expr)


State 164

   79 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 79 (boolean_term)


State 165

   83 relop_expr: expr rel_op expr .
   91 expr: expr . add_op term

    OP_ADD  shift, and go to state 132
    OP_SUB  shift, and go to state 133

    $default  reduce using rule 83 (relop_expr)

    add_op  go to state 141


State 166

   91 expr: expr add_op term .
   95 term: term . mul_op factor

    OP_MUL  shift, and go to state 142
    OP_DIV  shift, and go to state 143
    OP_MOD  shift, and go to state 144

    $default  reduce using rule 91 (expr)

    mul_op  go to state 145


State 167

   95 term: term mul_op factor .

    $default  reduce using rule 95 (term)


State 168

   70 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 181


State 169

   67 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 182


State 170

   75 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 96
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 97
    OP_NOT       shift, and go to state 98
    MK_LPAREN    shift, and go to state 99

    int_const       go to state 43
    literal_const   go to state 100
    boolean_expr    go to state 183
    boolean_term    go to state 102
    boolean_factor  go to state 103
    relop_expr      go to state 104
    expr            go to state 105
    term            go to state 106
    factor          go to state 107
    var_ref         go to state 108


State 171

   64 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 64 (simple_stmt)


State 172

  109 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 109 (dim)


State 173

   50 array_type: ARRAY $@9 int_const TO int_const OF . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 184
    scalar_type  go to state 93
    array_type   go to state 94


State 174

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END . $@8 ID

    $default  reduce using rule 32 ($@8)

    $@8  go to state 185


State 175

   71 for_stmt: FOR ID OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 186


State 176

  104 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 104 (factor)


State 177

  105 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 187


State 178

  103 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 103 (factor)


State 179

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 61 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 188
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 180

   69 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 189


State 181

   70 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 190


State 182

   67 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 67 (proc_call_stmt)


State 183

   75 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   77 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 130

    $default  reduce using rule 75 (boolean_expr_list)


State 184

   50 array_type: ARRAY $@9 int_const TO int_const OF type .

    $default  reduce using rule 50 (array_type)


State 185

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 . ID

    ID  shift, and go to state 191


State 186

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 192


State 187

  105 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 105 (factor)


State 188

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 193


State 189

   69 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 69 (cond_stmt)


State 190

   70 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 70 (while_stmt)


State 191

   33 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@8 ID .

    $default  reduce using rule 33 (func_decl)


State 192

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 61 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 194
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 193

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 195


State 194

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 196


State 195

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 68 (cond_stmt)


State 196

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 197


State 197

   71 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 71 (for_stmt)
