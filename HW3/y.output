Terminals unused in grammar

   DEF


Rules useless in parser due to conflicts

   10 $@4: %empty

   12 $@5: %empty


State 7 conflicts: 1 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END ID

    4 program_body: opt_decl_list opt_func_decl_list compound_stmt

    5 opt_decl_list: decl_list
    6              | %empty

    7 $@3: %empty

    8 decl_list: decl_list $@3 decl
    9          | decl

   10 $@4: %empty

   11 decl: VAR $@4 id_list MK_COLON scalar_type MK_SEMICOLON

   12 $@5: %empty

   13 decl: VAR $@5 id_list MK_COLON array_type MK_SEMICOLON
   14     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   15 int_const: INT_CONST
   16          | OCTAL_CONST

   17 literal_const: int_const
   18              | OP_SUB int_const
   19              | FLOAT_CONST
   20              | OP_SUB FLOAT_CONST
   21              | SCIENTIFIC
   22              | OP_SUB SCIENTIFIC
   23              | STR_CONST
   24              | TRUE
   25              | FALSE

   26 opt_func_decl_list: func_decl_list
   27                   | %empty

   28 func_decl_list: func_decl_list func_decl
   29               | func_decl

   30 $@6: %empty

   31 $@7: %empty

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID

   33 opt_param_list: param_list
   34               | %empty

   35 param_list: param_list MK_SEMICOLON param
   36           | param

   37 param: id_list MK_COLON type

   38 id_list: id_list MK_COMMA ID
   39        | ID

   40 opt_type: MK_COLON type
   41         | %empty

   42 type: scalar_type
   43     | array_type

   44 scalar_type: INTEGER
   45            | REAL
   46            | BOOLEAN
   47            | STRING

   48 @8: %empty

   49 array_type: ARRAY @8 int_const TO int_const OF type

   50 stmt: compound_stmt
   51     | simple_stmt
   52     | cond_stmt
   53     | while_stmt
   54     | for_stmt
   55     | return_stmt
   56     | proc_call_stmt

   57 $@9: %empty

   58 compound_stmt: BEG $@9 opt_decl_list opt_stmt_list END

   59 opt_stmt_list: stmt_list
   60              | %empty

   61 stmt_list: stmt_list stmt
   62          | stmt

   63 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   64            | PRINT boolean_expr MK_SEMICOLON
   65            | READ boolean_expr MK_SEMICOLON

   66 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   68          | IF boolean_expr THEN opt_stmt_list END IF

   69 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   71 return_stmt: RETURN boolean_expr MK_SEMICOLON

   72 opt_boolean_expr_list: boolean_expr_list
   73                      | %empty

   74 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   75                  | boolean_expr

   76 boolean_expr: boolean_expr OP_OR boolean_term
   77             | boolean_term

   78 boolean_term: boolean_term OP_AND boolean_factor
   79             | boolean_factor

   80 boolean_factor: OP_NOT boolean_factor
   81               | relop_expr

   82 relop_expr: expr rel_op expr
   83           | expr

   84 rel_op: OP_LT
   85       | OP_LE
   86       | OP_EQ
   87       | OP_GE
   88       | OP_GT
   89       | OP_NE

   90 expr: expr add_op term
   91     | term

   92 add_op: OP_ADD
   93       | OP_SUB

   94 term: term mul_op factor
   95     | factor

   96 mul_op: OP_MUL
   97       | OP_DIV
   98       | OP_MOD

   99 factor: var_ref
  100       | OP_SUB var_ref
  101       | MK_LPAREN boolean_expr MK_RPAREN
  102       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
  103       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  104       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  105       | literal_const

  106 var_ref: ID
  107        | var_ref dim

  108 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 49
BEG (259) 58
BOOLEAN (260) 46
DEF (261)
DO (262) 69 70
ELSE (263) 67
END (264) 3 32 58 67 68 69 70
FALSE (265) 25
FOR (266) 70
INTEGER (267) 44
IF (268) 67 68
OF (269) 49
PRINT (270) 64
READ (271) 65
REAL (272) 45
RETURN (273) 71
STRING (274) 47
THEN (275) 67 68
TO (276) 49 70
TRUE (277) 24
VAR (278) 11 13 14
WHILE (279) 69
ID (280) 3 32 38 39 66 70 103 104 106
OCTAL_CONST (281) 16
INT_CONST (282) 15
FLOAT_CONST (283) 19 20
SCIENTIFIC (284) 21 22
STR_CONST (285) 23
OP_ADD (286) 92
OP_SUB (287) 18 20 22 93 100 102 104
OP_MUL (288) 96
OP_DIV (289) 97
OP_MOD (290) 98
OP_ASSIGN (291) 63 70
OP_EQ (292) 86
OP_NE (293) 89
OP_GT (294) 88
OP_LT (295) 84
OP_GE (296) 87
OP_LE (297) 85
OP_AND (298) 78
OP_OR (299) 76
OP_NOT (300) 80
MK_COMMA (301) 38 74
MK_COLON (302) 11 13 14 37 40
MK_SEMICOLON (303) 3 11 13 14 32 35 63 64 65 66 71
MK_LPAREN (304) 32 66 101 102 103 104
MK_RPAREN (305) 32 66 101 102 103 104
MK_LB (306) 108
MK_RB (307) 108


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 3, on right: 0
$@1 (55)
    on left: 1, on right: 3
$@2 (56)
    on left: 2, on right: 3
program_body (57)
    on left: 4, on right: 3
opt_decl_list (58)
    on left: 5 6, on right: 4 58
decl_list (59)
    on left: 8 9, on right: 5 8
$@3 (60)
    on left: 7, on right: 8
decl (61)
    on left: 11 13 14, on right: 8 9
$@4 (62)
    on left: 10, on right: 11
$@5 (63)
    on left: 12, on right: 13
int_const (64)
    on left: 15 16, on right: 17 18 49 70
literal_const (65)
    on left: 17 18 19 20 21 22 23 24 25, on right: 14 105
opt_func_decl_list (66)
    on left: 26 27, on right: 4
func_decl_list (67)
    on left: 28 29, on right: 26 28
func_decl (68)
    on left: 32, on right: 28 29
$@6 (69)
    on left: 30, on right: 32
$@7 (70)
    on left: 31, on right: 32
opt_param_list (71)
    on left: 33 34, on right: 32
param_list (72)
    on left: 35 36, on right: 33 35
param (73)
    on left: 37, on right: 35 36
id_list (74)
    on left: 38 39, on right: 11 13 14 37 38
opt_type (75)
    on left: 40 41, on right: 32
type (76)
    on left: 42 43, on right: 37 40 49
scalar_type (77)
    on left: 44 45 46 47, on right: 11 42
array_type (78)
    on left: 49, on right: 13 43
@8 (79)
    on left: 48, on right: 49
stmt (80)
    on left: 50 51 52 53 54 55 56, on right: 61 62
compound_stmt (81)
    on left: 58, on right: 4 32 50
$@9 (82)
    on left: 57, on right: 58
opt_stmt_list (83)
    on left: 59 60, on right: 58 67 68 69 70
stmt_list (84)
    on left: 61 62, on right: 59 61
simple_stmt (85)
    on left: 63 64 65, on right: 51
proc_call_stmt (86)
    on left: 66, on right: 56
cond_stmt (87)
    on left: 67 68, on right: 52
while_stmt (88)
    on left: 69, on right: 53
for_stmt (89)
    on left: 70, on right: 54
return_stmt (90)
    on left: 71, on right: 55
opt_boolean_expr_list (91)
    on left: 72 73, on right: 66 103 104
boolean_expr_list (92)
    on left: 74 75, on right: 72 74
boolean_expr (93)
    on left: 76 77, on right: 63 64 65 67 68 69 71 74 75 76 101 102
    108
boolean_term (94)
    on left: 78 79, on right: 76 77 78
boolean_factor (95)
    on left: 80 81, on right: 78 79 80
relop_expr (96)
    on left: 82 83, on right: 81
rel_op (97)
    on left: 84 85 86 87 88 89, on right: 82
expr (98)
    on left: 90 91, on right: 82 83 90
add_op (99)
    on left: 92 93, on right: 90
term (100)
    on left: 94 95, on right: 90 91 94
mul_op (101)
    on left: 96 97 98, on right: 94
factor (102)
    on left: 99 100 101 102 103 104 105, on right: 94 95
var_ref (103)
    on left: 106 107, on right: 63 99 100 107
dim (104)
    on left: 108, on right: 107


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    3 program: ID . $@1 MK_SEMICOLON $@2 program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    3 program: ID $@1 . MK_SEMICOLON $@2 program_body END ID

    MK_SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    3 program: ID $@1 MK_SEMICOLON . $@2 program_body END ID

    $default  reduce using rule 2 ($@2)

    $@2  go to state 6


State 6

    3 program: ID $@1 MK_SEMICOLON $@2 . program_body END ID

    VAR  shift, and go to state 7

    $default  reduce using rule 6 (opt_decl_list)

    program_body   go to state 8
    opt_decl_list  go to state 9
    decl_list      go to state 10
    decl           go to state 11


State 7

   11 decl: VAR . $@4 id_list MK_COLON scalar_type MK_SEMICOLON
   13     | VAR . $@5 id_list MK_COLON array_type MK_SEMICOLON
   14     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 12

    ID  [reduce using rule 10 ($@4)]
    ID  [reduce using rule 12 ($@5)]

    $@4      go to state 13
    $@5      go to state 14
    id_list  go to state 15


State 8

    3 program: ID $@1 MK_SEMICOLON $@2 program_body . END ID

    END  shift, and go to state 16


State 9

    4 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 17

    $default  reduce using rule 27 (opt_func_decl_list)

    opt_func_decl_list  go to state 18
    func_decl_list      go to state 19
    func_decl           go to state 20


State 10

    5 opt_decl_list: decl_list .
    8 decl_list: decl_list . $@3 decl

    VAR       reduce using rule 7 ($@3)
    $default  reduce using rule 5 (opt_decl_list)

    $@3  go to state 21


State 11

    9 decl_list: decl .

    $default  reduce using rule 9 (decl_list)


State 12

   39 id_list: ID .

    $default  reduce using rule 39 (id_list)


State 13

   11 decl: VAR $@4 . id_list MK_COLON scalar_type MK_SEMICOLON

    ID  shift, and go to state 12

    id_list  go to state 22


State 14

   13 decl: VAR $@5 . id_list MK_COLON array_type MK_SEMICOLON

    ID  shift, and go to state 12

    id_list  go to state 23


State 15

   14 decl: VAR id_list . MK_COLON literal_const MK_SEMICOLON
   38 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 25


State 16

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END . ID

    ID  shift, and go to state 26


State 17

   32 func_decl: ID . $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID

    $default  reduce using rule 30 ($@6)

    $@6  go to state 27


State 18

    4 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 28

    compound_stmt  go to state 29


State 19

   26 opt_func_decl_list: func_decl_list .
   28 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 17

    $default  reduce using rule 26 (opt_func_decl_list)

    func_decl  go to state 30


State 20

   29 func_decl_list: func_decl .

    $default  reduce using rule 29 (func_decl_list)


State 21

    8 decl_list: decl_list $@3 . decl

    VAR  shift, and go to state 7

    decl  go to state 31


State 22

   11 decl: VAR $@4 id_list . MK_COLON scalar_type MK_SEMICOLON
   38 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 32


State 23

   13 decl: VAR $@5 id_list . MK_COLON array_type MK_SEMICOLON
   38 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 33


State 24

   38 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 34


State 25

   14 decl: VAR id_list MK_COLON . literal_const MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 42

    int_const      go to state 43
    literal_const  go to state 44


State 26

    3 program: ID $@1 MK_SEMICOLON $@2 program_body END ID .

    $default  reduce using rule 3 (program)


State 27

   32 func_decl: ID $@6 . MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID

    MK_LPAREN  shift, and go to state 45


State 28

   58 compound_stmt: BEG . $@9 opt_decl_list opt_stmt_list END

    $default  reduce using rule 57 ($@9)

    $@9  go to state 46


State 29

    4 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 4 (program_body)


State 30

   28 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 28 (func_decl_list)


State 31

    8 decl_list: decl_list $@3 decl .

    $default  reduce using rule 8 (decl_list)


State 32

   11 decl: VAR $@4 id_list MK_COLON . scalar_type MK_SEMICOLON

    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    scalar_type  go to state 51


State 33

   13 decl: VAR $@5 id_list MK_COLON . array_type MK_SEMICOLON

    ARRAY  shift, and go to state 52

    array_type  go to state 53


State 34

   38 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 38 (id_list)


State 35

   25 literal_const: FALSE .

    $default  reduce using rule 25 (literal_const)


State 36

   24 literal_const: TRUE .

    $default  reduce using rule 24 (literal_const)


State 37

   16 int_const: OCTAL_CONST .

    $default  reduce using rule 16 (int_const)


State 38

   15 int_const: INT_CONST .

    $default  reduce using rule 15 (int_const)


State 39

   19 literal_const: FLOAT_CONST .

    $default  reduce using rule 19 (literal_const)


State 40

   21 literal_const: SCIENTIFIC .

    $default  reduce using rule 21 (literal_const)


State 41

   23 literal_const: STR_CONST .

    $default  reduce using rule 23 (literal_const)


State 42

   18 literal_const: OP_SUB . int_const
   20              | OP_SUB . FLOAT_CONST
   22              | OP_SUB . SCIENTIFIC

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 54
    SCIENTIFIC   shift, and go to state 55

    int_const  go to state 56


State 43

   17 literal_const: int_const .

    $default  reduce using rule 17 (literal_const)


State 44

   14 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 57


State 45

   32 func_decl: ID $@6 MK_LPAREN . opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID

    ID  shift, and go to state 12

    $default  reduce using rule 34 (opt_param_list)

    opt_param_list  go to state 58
    param_list      go to state 59
    param           go to state 60
    id_list         go to state 61


State 46

   58 compound_stmt: BEG $@9 . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 7

    $default  reduce using rule 6 (opt_decl_list)

    opt_decl_list  go to state 62
    decl_list      go to state 10
    decl           go to state 11


State 47

   46 scalar_type: BOOLEAN .

    $default  reduce using rule 46 (scalar_type)


State 48

   44 scalar_type: INTEGER .

    $default  reduce using rule 44 (scalar_type)


State 49

   45 scalar_type: REAL .

    $default  reduce using rule 45 (scalar_type)


State 50

   47 scalar_type: STRING .

    $default  reduce using rule 47 (scalar_type)


State 51

   11 decl: VAR $@4 id_list MK_COLON scalar_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 63


State 52

   49 array_type: ARRAY . @8 int_const TO int_const OF type

    $default  reduce using rule 48 (@8)

    @8  go to state 64


State 53

   13 decl: VAR $@5 id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 65


State 54

   20 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 20 (literal_const)


State 55

   22 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 22 (literal_const)


State 56

   18 literal_const: OP_SUB int_const .

    $default  reduce using rule 18 (literal_const)


State 57

   14 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 14 (decl)


State 58

   32 func_decl: ID $@6 MK_LPAREN opt_param_list . MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID

    MK_RPAREN  shift, and go to state 66


State 59

   33 opt_param_list: param_list .
   35 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 67

    $default  reduce using rule 33 (opt_param_list)


State 60

   36 param_list: param .

    $default  reduce using rule 36 (param_list)


State 61

   37 param: id_list . MK_COLON type
   38 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 24
    MK_COLON  shift, and go to state 68


State 62

   58 compound_stmt: BEG $@9 opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 78
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 63

   11 decl: VAR $@4 id_list MK_COLON scalar_type MK_SEMICOLON .

    $default  reduce using rule 11 (decl)


State 64

   49 array_type: ARRAY @8 . int_const TO int_const OF type

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 87


State 65

   13 decl: VAR $@5 id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 13 (decl)


State 66

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN . opt_type MK_SEMICOLON compound_stmt END $@7 ID

    MK_COLON  shift, and go to state 88

    $default  reduce using rule 41 (opt_type)

    opt_type  go to state 89


State 67

   35 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 12

    param    go to state 90
    id_list  go to state 61


State 68

   37 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 91
    scalar_type  go to state 92
    array_type   go to state 93


State 69

   70 for_stmt: FOR . ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 94


State 70

   67 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   68          | IF . boolean_expr THEN opt_stmt_list END IF

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 100
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 71

   64 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 108
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 72

   65 simple_stmt: READ . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 109
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 73

   71 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 110
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 74

   69 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 111
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 75

   66 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  106 var_ref: ID .

    MK_LPAREN  shift, and go to state 112

    $default  reduce using rule 106 (var_ref)


State 76

   62 stmt_list: stmt .

    $default  reduce using rule 62 (stmt_list)


State 77

   50 stmt: compound_stmt .

    $default  reduce using rule 50 (stmt)


State 78

   58 compound_stmt: BEG $@9 opt_decl_list opt_stmt_list . END

    END  shift, and go to state 113


State 79

   59 opt_stmt_list: stmt_list .
   61 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 59 (opt_stmt_list)

    stmt            go to state 114
    compound_stmt   go to state 77
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 80

   51 stmt: simple_stmt .

    $default  reduce using rule 51 (stmt)


State 81

   56 stmt: proc_call_stmt .

    $default  reduce using rule 56 (stmt)


State 82

   52 stmt: cond_stmt .

    $default  reduce using rule 52 (stmt)


State 83

   53 stmt: while_stmt .

    $default  reduce using rule 53 (stmt)


State 84

   54 stmt: for_stmt .

    $default  reduce using rule 54 (stmt)


State 85

   55 stmt: return_stmt .

    $default  reduce using rule 55 (stmt)


State 86

   63 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  107 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 115
    MK_LB      shift, and go to state 116

    dim  go to state 117


State 87

   49 array_type: ARRAY @8 int_const . TO int_const OF type

    TO  shift, and go to state 118


State 88

   40 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 119
    scalar_type  go to state 92
    array_type   go to state 93


State 89

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type . MK_SEMICOLON compound_stmt END $@7 ID

    MK_SEMICOLON  shift, and go to state 120


State 90

   35 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 35 (param_list)


State 91

   37 param: id_list MK_COLON type .

    $default  reduce using rule 37 (param)


State 92

   42 type: scalar_type .

    $default  reduce using rule 42 (type)


State 93

   43 type: array_type .

    $default  reduce using rule 43 (type)


State 94

   70 for_stmt: FOR ID . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 121


State 95

  103 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  106 var_ref: ID .

    MK_LPAREN  shift, and go to state 122

    $default  reduce using rule 106 (var_ref)


State 96

   18 literal_const: OP_SUB . int_const
   20              | OP_SUB . FLOAT_CONST
   22              | OP_SUB . SCIENTIFIC
  100 factor: OP_SUB . var_ref
  102       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  104       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 123
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 54
    SCIENTIFIC   shift, and go to state 55
    MK_LPAREN    shift, and go to state 124

    int_const  go to state 56
    var_ref    go to state 125


State 97

   80 boolean_factor: OP_NOT . boolean_factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_factor  go to state 126
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 98

  101 factor: MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 127
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 99

  105 factor: literal_const .

    $default  reduce using rule 105 (factor)


State 100

   67 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   68          | IF boolean_expr . THEN opt_stmt_list END IF
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 128
    OP_OR  shift, and go to state 129


State 101

   77 boolean_expr: boolean_term .
   78 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 130

    $default  reduce using rule 77 (boolean_expr)


State 102

   79 boolean_term: boolean_factor .

    $default  reduce using rule 79 (boolean_term)


State 103

   81 boolean_factor: relop_expr .

    $default  reduce using rule 81 (boolean_factor)


State 104

   82 relop_expr: expr . rel_op expr
   83           | expr .
   90 expr: expr . add_op term

    OP_ADD  shift, and go to state 131
    OP_SUB  shift, and go to state 132
    OP_EQ   shift, and go to state 133
    OP_NE   shift, and go to state 134
    OP_GT   shift, and go to state 135
    OP_LT   shift, and go to state 136
    OP_GE   shift, and go to state 137
    OP_LE   shift, and go to state 138

    $default  reduce using rule 83 (relop_expr)

    rel_op  go to state 139
    add_op  go to state 140


State 105

   91 expr: term .
   94 term: term . mul_op factor

    OP_MUL  shift, and go to state 141
    OP_DIV  shift, and go to state 142
    OP_MOD  shift, and go to state 143

    $default  reduce using rule 91 (expr)

    mul_op  go to state 144


State 106

   95 term: factor .

    $default  reduce using rule 95 (term)


State 107

   99 factor: var_ref .
  107 var_ref: var_ref . dim

    MK_LB  shift, and go to state 116

    $default  reduce using rule 99 (factor)

    dim  go to state 117


State 108

   64 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 129
    MK_SEMICOLON  shift, and go to state 145


State 109

   65 simple_stmt: READ boolean_expr . MK_SEMICOLON
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 129
    MK_SEMICOLON  shift, and go to state 146


State 110

   71 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 129
    MK_SEMICOLON  shift, and go to state 147


State 111

   69 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 148
    OP_OR  shift, and go to state 129


State 112

   66 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    $default  reduce using rule 73 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 99
    opt_boolean_expr_list  go to state 149
    boolean_expr_list      go to state 150
    boolean_expr           go to state 151
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 113

   58 compound_stmt: BEG $@9 opt_decl_list opt_stmt_list END .

    $default  reduce using rule 58 (compound_stmt)


State 114

   61 stmt_list: stmt_list stmt .

    $default  reduce using rule 61 (stmt_list)


State 115

   63 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 152
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 116

  108 dim: MK_LB . boolean_expr MK_RB

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 153
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 117

  107 var_ref: var_ref dim .

    $default  reduce using rule 107 (var_ref)


State 118

   49 array_type: ARRAY @8 int_const TO . int_const OF type

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 154


State 119

   40 opt_type: MK_COLON type .

    $default  reduce using rule 40 (opt_type)


State 120

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON . compound_stmt END $@7 ID

    BEG  shift, and go to state 28

    compound_stmt  go to state 155


State 121

   70 for_stmt: FOR ID OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 156


State 122

  103 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    $default  reduce using rule 73 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 99
    opt_boolean_expr_list  go to state 157
    boolean_expr_list      go to state 150
    boolean_expr           go to state 151
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 123

  104 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  106 var_ref: ID .

    MK_LPAREN  shift, and go to state 158

    $default  reduce using rule 106 (var_ref)


State 124

  102 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 159
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 125

  100 factor: OP_SUB var_ref .
  107 var_ref: var_ref . dim

    MK_LB  shift, and go to state 116

    $default  reduce using rule 100 (factor)

    dim  go to state 117


State 126

   80 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 80 (boolean_factor)


State 127

   76 boolean_expr: boolean_expr . OP_OR boolean_term
  101 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 129
    MK_RPAREN  shift, and go to state 160


State 128

   67 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   68          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 161
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 129

   76 boolean_expr: boolean_expr OP_OR . boolean_term

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_term    go to state 162
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 130

   78 boolean_term: boolean_term OP_AND . boolean_factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_factor  go to state 163
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 131

   92 add_op: OP_ADD .

    $default  reduce using rule 92 (add_op)


State 132

   93 add_op: OP_SUB .

    $default  reduce using rule 93 (add_op)


State 133

   86 rel_op: OP_EQ .

    $default  reduce using rule 86 (rel_op)


State 134

   89 rel_op: OP_NE .

    $default  reduce using rule 89 (rel_op)


State 135

   88 rel_op: OP_GT .

    $default  reduce using rule 88 (rel_op)


State 136

   84 rel_op: OP_LT .

    $default  reduce using rule 84 (rel_op)


State 137

   87 rel_op: OP_GE .

    $default  reduce using rule 87 (rel_op)


State 138

   85 rel_op: OP_LE .

    $default  reduce using rule 85 (rel_op)


State 139

   82 relop_expr: expr rel_op . expr

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    MK_LPAREN    shift, and go to state 98

    int_const      go to state 43
    literal_const  go to state 99
    expr           go to state 164
    term           go to state 105
    factor         go to state 106
    var_ref        go to state 107


State 140

   90 expr: expr add_op . term

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    MK_LPAREN    shift, and go to state 98

    int_const      go to state 43
    literal_const  go to state 99
    term           go to state 165
    factor         go to state 106
    var_ref        go to state 107


State 141

   96 mul_op: OP_MUL .

    $default  reduce using rule 96 (mul_op)


State 142

   97 mul_op: OP_DIV .

    $default  reduce using rule 97 (mul_op)


State 143

   98 mul_op: OP_MOD .

    $default  reduce using rule 98 (mul_op)


State 144

   94 term: term mul_op . factor

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    MK_LPAREN    shift, and go to state 98

    int_const      go to state 43
    literal_const  go to state 99
    factor         go to state 166
    var_ref        go to state 107


State 145

   64 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 64 (simple_stmt)


State 146

   65 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 65 (simple_stmt)


State 147

   71 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 71 (return_stmt)


State 148

   69 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 167
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 149

   66 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 168


State 150

   72 opt_boolean_expr_list: boolean_expr_list .
   74 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 169

    $default  reduce using rule 72 (opt_boolean_expr_list)


State 151

   75 boolean_expr_list: boolean_expr .
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 129

    $default  reduce using rule 75 (boolean_expr_list)


State 152

   63 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 129
    MK_SEMICOLON  shift, and go to state 170


State 153

   76 boolean_expr: boolean_expr . OP_OR boolean_term
  108 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 129
    MK_RB  shift, and go to state 171


State 154

   49 array_type: ARRAY @8 int_const TO int_const . OF type

    OF  shift, and go to state 172


State 155

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt . END $@7 ID

    END  shift, and go to state 173


State 156

   70 for_stmt: FOR ID OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 174


State 157

  103 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 175


State 158

  104 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    $default  reduce using rule 73 (opt_boolean_expr_list)

    int_const              go to state 43
    literal_const          go to state 99
    opt_boolean_expr_list  go to state 176
    boolean_expr_list      go to state 150
    boolean_expr           go to state 151
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 159

   76 boolean_expr: boolean_expr . OP_OR boolean_term
  102 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 129
    MK_RPAREN  shift, and go to state 177


State 160

  101 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 101 (factor)


State 161

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   68          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 178
    END   shift, and go to state 179


State 162

   76 boolean_expr: boolean_expr OP_OR boolean_term .
   78 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 130

    $default  reduce using rule 76 (boolean_expr)


State 163

   78 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 78 (boolean_term)


State 164

   82 relop_expr: expr rel_op expr .
   90 expr: expr . add_op term

    OP_ADD  shift, and go to state 131
    OP_SUB  shift, and go to state 132

    $default  reduce using rule 82 (relop_expr)

    add_op  go to state 140


State 165

   90 expr: expr add_op term .
   94 term: term . mul_op factor

    OP_MUL  shift, and go to state 141
    OP_DIV  shift, and go to state 142
    OP_MOD  shift, and go to state 143

    $default  reduce using rule 90 (expr)

    mul_op  go to state 144


State 166

   94 term: term mul_op factor .

    $default  reduce using rule 94 (term)


State 167

   69 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 180


State 168

   66 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 181


State 169

   74 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    FALSE        shift, and go to state 35
    TRUE         shift, and go to state 36
    ID           shift, and go to state 95
    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38
    FLOAT_CONST  shift, and go to state 39
    SCIENTIFIC   shift, and go to state 40
    STR_CONST    shift, and go to state 41
    OP_SUB       shift, and go to state 96
    OP_NOT       shift, and go to state 97
    MK_LPAREN    shift, and go to state 98

    int_const       go to state 43
    literal_const   go to state 99
    boolean_expr    go to state 182
    boolean_term    go to state 101
    boolean_factor  go to state 102
    relop_expr      go to state 103
    expr            go to state 104
    term            go to state 105
    factor          go to state 106
    var_ref         go to state 107


State 170

   63 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 63 (simple_stmt)


State 171

  108 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 108 (dim)


State 172

   49 array_type: ARRAY @8 int_const TO int_const OF . type

    ARRAY    shift, and go to state 52
    BOOLEAN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    REAL     shift, and go to state 49
    STRING   shift, and go to state 50

    type         go to state 183
    scalar_type  go to state 92
    array_type   go to state 93


State 173

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END . $@7 ID

    $default  reduce using rule 31 ($@7)

    $@7  go to state 184


State 174

   70 for_stmt: FOR ID OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 37
    INT_CONST    shift, and go to state 38

    int_const  go to state 185


State 175

  103 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 103 (factor)


State 176

  104 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 186


State 177

  102 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 102 (factor)


State 178

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 187
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 179

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 188


State 180

   69 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 189


State 181

   66 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 66 (proc_call_stmt)


State 182

   74 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   76 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 129

    $default  reduce using rule 74 (boolean_expr_list)


State 183

   49 array_type: ARRAY @8 int_const TO int_const OF type .

    $default  reduce using rule 49 (array_type)


State 184

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 . ID

    ID  shift, and go to state 190


State 185

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 191


State 186

  104 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 104 (factor)


State 187

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 192


State 188

   68 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 68 (cond_stmt)


State 189

   69 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 69 (while_stmt)


State 190

   32 func_decl: ID $@6 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END $@7 ID .

    $default  reduce using rule 32 (func_decl)


State 191

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 28
    FOR     shift, and go to state 69
    IF      shift, and go to state 70
    PRINT   shift, and go to state 71
    READ    shift, and go to state 72
    RETURN  shift, and go to state 73
    WHILE   shift, and go to state 74
    ID      shift, and go to state 75

    $default  reduce using rule 60 (opt_stmt_list)

    stmt            go to state 76
    compound_stmt   go to state 77
    opt_stmt_list   go to state 193
    stmt_list       go to state 79
    simple_stmt     go to state 80
    proc_call_stmt  go to state 81
    cond_stmt       go to state 82
    while_stmt      go to state 83
    for_stmt        go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


State 192

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 194


State 193

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 195


State 194

   67 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 67 (cond_stmt)


State 195

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 196


State 196

   70 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 70 (for_stmt)
