Terminals unused in grammar

   DEF


Grammar

    0 $accept: program $end

    1 program: ID MK_SEMICOLON program_body END ID

    2 program_body: opt_decl_list opt_func_decl_list compound_stmt

    3 opt_decl_list: decl_list
    4              | %empty

    5 decl_list: decl_list decl
    6          | decl

    7 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON
    8     | VAR id_list MK_COLON array_type MK_SEMICOLON
    9     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   10 int_const: INT_CONST
   11          | OCTAL_CONST

   12 literal_const: int_const
   13              | OP_SUB int_const
   14              | FLOAT_CONST
   15              | OP_SUB FLOAT_CONST
   16              | SCIENTIFIC
   17              | OP_SUB SCIENTIFIC
   18              | STR_CONST
   19              | TRUE
   20              | FALSE

   21 opt_func_decl_list: func_decl_list
   22                   | %empty

   23 func_decl_list: func_decl_list func_decl
   24               | func_decl

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END ID

   26 opt_param_list: param_list
   27               | %empty

   28 param_list: param_list MK_SEMICOLON param
   29           | param

   30 param: id_list MK_COLON type

   31 id_list: id_list MK_COMMA ID
   32        | ID

   33 opt_type: MK_COLON type
   34         | %empty

   35 type: scalar_type
   36     | array_type

   37 scalar_type: INTEGER
   38            | REAL
   39            | BOOLEAN
   40            | STRING

   41 array_type: ARRAY int_const TO int_const OF type

   42 stmt: compound_stmt
   43     | simple_stmt
   44     | cond_stmt
   45     | while_stmt
   46     | for_stmt
   47     | return_stmt
   48     | proc_call_stmt

   49 compound_stmt: BEG opt_decl_list opt_stmt_list END

   50 opt_stmt_list: stmt_list
   51              | %empty

   52 stmt_list: stmt_list stmt
   53          | stmt

   54 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   55            | PRINT boolean_expr MK_SEMICOLON
   56            | READ boolean_expr MK_SEMICOLON

   57 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   59          | IF boolean_expr THEN opt_stmt_list END IF

   60 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   62 return_stmt: RETURN boolean_expr MK_SEMICOLON

   63 opt_boolean_expr_list: boolean_expr_list
   64                      | %empty

   65 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   66                  | boolean_expr

   67 boolean_expr: boolean_expr OP_OR boolean_term
   68             | boolean_term

   69 boolean_term: boolean_term OP_AND boolean_factor
   70             | boolean_factor

   71 boolean_factor: OP_NOT boolean_factor
   72               | relop_expr

   73 relop_expr: expr rel_op expr
   74           | expr

   75 rel_op: OP_LT
   76       | OP_LE
   77       | OP_EQ
   78       | OP_GE
   79       | OP_GT
   80       | OP_NE

   81 expr: expr add_op term
   82     | term

   83 add_op: OP_ADD
   84       | OP_SUB

   85 term: term mul_op factor
   86     | factor

   87 mul_op: OP_MUL
   88       | OP_DIV
   89       | OP_MOD

   90 factor: var_ref
   91       | OP_SUB var_ref
   92       | MK_LPAREN boolean_expr MK_RPAREN
   93       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
   94       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
   95       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
   96       | literal_const

   97 var_ref: ID
   98        | var_ref dim

   99 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 41
BEG (259) 49
BOOLEAN (260) 39
DEF (261)
DO (262) 60 61
ELSE (263) 58
END (264) 1 25 49 58 59 60 61
FALSE (265) 20
FOR (266) 61
INTEGER (267) 37
IF (268) 58 59
OF (269) 41
PRINT (270) 55
READ (271) 56
REAL (272) 38
RETURN (273) 62
STRING (274) 40
THEN (275) 58 59
TO (276) 41 61
TRUE (277) 19
VAR (278) 7 8 9
WHILE (279) 60
ID (280) 1 25 31 32 57 61 94 95 97
OCTAL_CONST (281) 11
INT_CONST (282) 10
FLOAT_CONST (283) 14 15
SCIENTIFIC (284) 16 17
STR_CONST (285) 18
OP_ADD (286) 83
OP_SUB (287) 13 15 17 84 91 93 95
OP_MUL (288) 87
OP_DIV (289) 88
OP_MOD (290) 89
OP_ASSIGN (291) 54 61
OP_EQ (292) 77
OP_NE (293) 80
OP_GT (294) 79
OP_LT (295) 75
OP_GE (296) 78
OP_LE (297) 76
OP_AND (298) 69
OP_OR (299) 67
OP_NOT (300) 71
MK_COMMA (301) 31 65
MK_COLON (302) 7 8 9 30 33
MK_SEMICOLON (303) 1 7 8 9 25 28 54 55 56 57 62
MK_LPAREN (304) 25 57 92 93 94 95
MK_RPAREN (305) 25 57 92 93 94 95
MK_LB (306) 99
MK_RB (307) 99


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
program_body (55)
    on left: 2, on right: 1
opt_decl_list (56)
    on left: 3 4, on right: 2 49
decl_list (57)
    on left: 5 6, on right: 3 5
decl (58)
    on left: 7 8 9, on right: 5 6
int_const (59)
    on left: 10 11, on right: 12 13 41 61
literal_const (60)
    on left: 12 13 14 15 16 17 18 19 20, on right: 9 96
opt_func_decl_list (61)
    on left: 21 22, on right: 2
func_decl_list (62)
    on left: 23 24, on right: 21 23
func_decl (63)
    on left: 25, on right: 23 24
opt_param_list (64)
    on left: 26 27, on right: 25
param_list (65)
    on left: 28 29, on right: 26 28
param (66)
    on left: 30, on right: 28 29
id_list (67)
    on left: 31 32, on right: 7 8 9 30 31
opt_type (68)
    on left: 33 34, on right: 25
type (69)
    on left: 35 36, on right: 30 33 41
scalar_type (70)
    on left: 37 38 39 40, on right: 7 35
array_type (71)
    on left: 41, on right: 8 36
stmt (72)
    on left: 42 43 44 45 46 47 48, on right: 52 53
compound_stmt (73)
    on left: 49, on right: 2 25 42
opt_stmt_list (74)
    on left: 50 51, on right: 49 58 59 60 61
stmt_list (75)
    on left: 52 53, on right: 50 52
simple_stmt (76)
    on left: 54 55 56, on right: 43
proc_call_stmt (77)
    on left: 57, on right: 48
cond_stmt (78)
    on left: 58 59, on right: 44
while_stmt (79)
    on left: 60, on right: 45
for_stmt (80)
    on left: 61, on right: 46
return_stmt (81)
    on left: 62, on right: 47
opt_boolean_expr_list (82)
    on left: 63 64, on right: 57 94 95
boolean_expr_list (83)
    on left: 65 66, on right: 63 65
boolean_expr (84)
    on left: 67 68, on right: 54 55 56 58 59 60 62 65 66 67 92 93 99
boolean_term (85)
    on left: 69 70, on right: 67 68 69
boolean_factor (86)
    on left: 71 72, on right: 69 70 71
relop_expr (87)
    on left: 73 74, on right: 72
rel_op (88)
    on left: 75 76 77 78 79 80, on right: 73
expr (89)
    on left: 81 82, on right: 73 74 81
add_op (90)
    on left: 83 84, on right: 81
term (91)
    on left: 85 86, on right: 81 82 85
mul_op (92)
    on left: 87 88 89, on right: 85
factor (93)
    on left: 90 91 92 93 94 95 96, on right: 85 86
var_ref (94)
    on left: 97 98, on right: 54 90 91 98
dim (95)
    on left: 99, on right: 98


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    1 program: ID . MK_SEMICOLON program_body END ID

    MK_SEMICOLON  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: ID MK_SEMICOLON . program_body END ID

    VAR  shift, and go to state 5

    $default  reduce using rule 4 (opt_decl_list)

    program_body   go to state 6
    opt_decl_list  go to state 7
    decl_list      go to state 8
    decl           go to state 9


State 4

    0 $accept: program $end .

    $default  accept


State 5

    7 decl: VAR . id_list MK_COLON scalar_type MK_SEMICOLON
    8     | VAR . id_list MK_COLON array_type MK_SEMICOLON
    9     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 10

    id_list  go to state 11


State 6

    1 program: ID MK_SEMICOLON program_body . END ID

    END  shift, and go to state 12


State 7

    2 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 13

    $default  reduce using rule 22 (opt_func_decl_list)

    opt_func_decl_list  go to state 14
    func_decl_list      go to state 15
    func_decl           go to state 16


State 8

    3 opt_decl_list: decl_list .
    5 decl_list: decl_list . decl

    VAR  shift, and go to state 5

    $default  reduce using rule 3 (opt_decl_list)

    decl  go to state 17


State 9

    6 decl_list: decl .

    $default  reduce using rule 6 (decl_list)


State 10

   32 id_list: ID .

    $default  reduce using rule 32 (id_list)


State 11

    7 decl: VAR id_list . MK_COLON scalar_type MK_SEMICOLON
    8     | VAR id_list . MK_COLON array_type MK_SEMICOLON
    9     | VAR id_list . MK_COLON literal_const MK_SEMICOLON
   31 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 18
    MK_COLON  shift, and go to state 19


State 12

    1 program: ID MK_SEMICOLON program_body END . ID

    ID  shift, and go to state 20


State 13

   25 func_decl: ID . MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END ID

    MK_LPAREN  shift, and go to state 21


State 14

    2 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 22

    compound_stmt  go to state 23


State 15

   21 opt_func_decl_list: func_decl_list .
   23 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 13

    $default  reduce using rule 21 (opt_func_decl_list)

    func_decl  go to state 24


State 16

   24 func_decl_list: func_decl .

    $default  reduce using rule 24 (func_decl_list)


State 17

    5 decl_list: decl_list decl .

    $default  reduce using rule 5 (decl_list)


State 18

   31 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 25


State 19

    7 decl: VAR id_list MK_COLON . scalar_type MK_SEMICOLON
    8     | VAR id_list MK_COLON . array_type MK_SEMICOLON
    9     | VAR id_list MK_COLON . literal_const MK_SEMICOLON

    ARRAY        shift, and go to state 26
    BOOLEAN      shift, and go to state 27
    FALSE        shift, and go to state 28
    INTEGER      shift, and go to state 29
    REAL         shift, and go to state 30
    STRING       shift, and go to state 31
    TRUE         shift, and go to state 32
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 38

    int_const      go to state 39
    literal_const  go to state 40
    scalar_type    go to state 41
    array_type     go to state 42


State 20

    1 program: ID MK_SEMICOLON program_body END ID .

    $default  reduce using rule 1 (program)


State 21

   25 func_decl: ID MK_LPAREN . opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END ID

    ID  shift, and go to state 10

    $default  reduce using rule 27 (opt_param_list)

    opt_param_list  go to state 43
    param_list      go to state 44
    param           go to state 45
    id_list         go to state 46


State 22

   49 compound_stmt: BEG . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 5

    $default  reduce using rule 4 (opt_decl_list)

    opt_decl_list  go to state 47
    decl_list      go to state 8
    decl           go to state 9


State 23

    2 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 2 (program_body)


State 24

   23 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 23 (func_decl_list)


State 25

   31 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 31 (id_list)


State 26

   41 array_type: ARRAY . int_const TO int_const OF type

    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34

    int_const  go to state 48


State 27

   39 scalar_type: BOOLEAN .

    $default  reduce using rule 39 (scalar_type)


State 28

   20 literal_const: FALSE .

    $default  reduce using rule 20 (literal_const)


State 29

   37 scalar_type: INTEGER .

    $default  reduce using rule 37 (scalar_type)


State 30

   38 scalar_type: REAL .

    $default  reduce using rule 38 (scalar_type)


State 31

   40 scalar_type: STRING .

    $default  reduce using rule 40 (scalar_type)


State 32

   19 literal_const: TRUE .

    $default  reduce using rule 19 (literal_const)


State 33

   11 int_const: OCTAL_CONST .

    $default  reduce using rule 11 (int_const)


State 34

   10 int_const: INT_CONST .

    $default  reduce using rule 10 (int_const)


State 35

   14 literal_const: FLOAT_CONST .

    $default  reduce using rule 14 (literal_const)


State 36

   16 literal_const: SCIENTIFIC .

    $default  reduce using rule 16 (literal_const)


State 37

   18 literal_const: STR_CONST .

    $default  reduce using rule 18 (literal_const)


State 38

   13 literal_const: OP_SUB . int_const
   15              | OP_SUB . FLOAT_CONST
   17              | OP_SUB . SCIENTIFIC

    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 49
    SCIENTIFIC   shift, and go to state 50

    int_const  go to state 51


State 39

   12 literal_const: int_const .

    $default  reduce using rule 12 (literal_const)


State 40

    9 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 52


State 41

    7 decl: VAR id_list MK_COLON scalar_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 53


State 42

    8 decl: VAR id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 54


State 43

   25 func_decl: ID MK_LPAREN opt_param_list . MK_RPAREN opt_type MK_SEMICOLON compound_stmt END ID

    MK_RPAREN  shift, and go to state 55


State 44

   26 opt_param_list: param_list .
   28 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 56

    $default  reduce using rule 26 (opt_param_list)


State 45

   29 param_list: param .

    $default  reduce using rule 29 (param_list)


State 46

   30 param: id_list . MK_COLON type
   31 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 18
    MK_COLON  shift, and go to state 57


State 47

   49 compound_stmt: BEG opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 51 (opt_stmt_list)

    stmt            go to state 65
    compound_stmt   go to state 66
    opt_stmt_list   go to state 67
    stmt_list       go to state 68
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 48

   41 array_type: ARRAY int_const . TO int_const OF type

    TO  shift, and go to state 76


State 49

   15 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 15 (literal_const)


State 50

   17 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 17 (literal_const)


State 51

   13 literal_const: OP_SUB int_const .

    $default  reduce using rule 13 (literal_const)


State 52

    9 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 9 (decl)


State 53

    7 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON .

    $default  reduce using rule 7 (decl)


State 54

    8 decl: VAR id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 8 (decl)


State 55

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN . opt_type MK_SEMICOLON compound_stmt END ID

    MK_COLON  shift, and go to state 77

    $default  reduce using rule 34 (opt_type)

    opt_type  go to state 78


State 56

   28 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 10

    param    go to state 79
    id_list  go to state 46


State 57

   30 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 80
    scalar_type  go to state 81
    array_type   go to state 82


State 58

   61 for_stmt: FOR . ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 83


State 59

   58 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   59          | IF . boolean_expr THEN opt_stmt_list END IF

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 89
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 60

   55 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 97
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 61

   56 simple_stmt: READ . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 98
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 62

   62 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 99
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 63

   60 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 100
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 64

   57 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
   97 var_ref: ID .

    MK_LPAREN  shift, and go to state 101

    $default  reduce using rule 97 (var_ref)


State 65

   53 stmt_list: stmt .

    $default  reduce using rule 53 (stmt_list)


State 66

   42 stmt: compound_stmt .

    $default  reduce using rule 42 (stmt)


State 67

   49 compound_stmt: BEG opt_decl_list opt_stmt_list . END

    END  shift, and go to state 102


State 68

   50 opt_stmt_list: stmt_list .
   52 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 50 (opt_stmt_list)

    stmt            go to state 103
    compound_stmt   go to state 66
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 69

   43 stmt: simple_stmt .

    $default  reduce using rule 43 (stmt)


State 70

   48 stmt: proc_call_stmt .

    $default  reduce using rule 48 (stmt)


State 71

   44 stmt: cond_stmt .

    $default  reduce using rule 44 (stmt)


State 72

   45 stmt: while_stmt .

    $default  reduce using rule 45 (stmt)


State 73

   46 stmt: for_stmt .

    $default  reduce using rule 46 (stmt)


State 74

   47 stmt: return_stmt .

    $default  reduce using rule 47 (stmt)


State 75

   54 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
   98 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 104
    MK_LB      shift, and go to state 105

    dim  go to state 106


State 76

   41 array_type: ARRAY int_const TO . int_const OF type

    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34

    int_const  go to state 107


State 77

   33 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 108
    scalar_type  go to state 81
    array_type   go to state 82


State 78

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type . MK_SEMICOLON compound_stmt END ID

    MK_SEMICOLON  shift, and go to state 109


State 79

   28 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 28 (param_list)


State 80

   30 param: id_list MK_COLON type .

    $default  reduce using rule 30 (param)


State 81

   35 type: scalar_type .

    $default  reduce using rule 35 (type)


State 82

   36 type: array_type .

    $default  reduce using rule 36 (type)


State 83

   61 for_stmt: FOR ID . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 110


State 84

   94 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
   97 var_ref: ID .

    MK_LPAREN  shift, and go to state 111

    $default  reduce using rule 97 (var_ref)


State 85

   13 literal_const: OP_SUB . int_const
   15              | OP_SUB . FLOAT_CONST
   17              | OP_SUB . SCIENTIFIC
   91 factor: OP_SUB . var_ref
   93       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
   95       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 112
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 49
    SCIENTIFIC   shift, and go to state 50
    MK_LPAREN    shift, and go to state 113

    int_const  go to state 51
    var_ref    go to state 114


State 86

   71 boolean_factor: OP_NOT . boolean_factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_factor  go to state 115
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 87

   92 factor: MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 116
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 88

   96 factor: literal_const .

    $default  reduce using rule 96 (factor)


State 89

   58 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   59          | IF boolean_expr . THEN opt_stmt_list END IF
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 117
    OP_OR  shift, and go to state 118


State 90

   68 boolean_expr: boolean_term .
   69 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 119

    $default  reduce using rule 68 (boolean_expr)


State 91

   70 boolean_term: boolean_factor .

    $default  reduce using rule 70 (boolean_term)


State 92

   72 boolean_factor: relop_expr .

    $default  reduce using rule 72 (boolean_factor)


State 93

   73 relop_expr: expr . rel_op expr
   74           | expr .
   81 expr: expr . add_op term

    OP_ADD  shift, and go to state 120
    OP_SUB  shift, and go to state 121
    OP_EQ   shift, and go to state 122
    OP_NE   shift, and go to state 123
    OP_GT   shift, and go to state 124
    OP_LT   shift, and go to state 125
    OP_GE   shift, and go to state 126
    OP_LE   shift, and go to state 127

    $default  reduce using rule 74 (relop_expr)

    rel_op  go to state 128
    add_op  go to state 129


State 94

   82 expr: term .
   85 term: term . mul_op factor

    OP_MUL  shift, and go to state 130
    OP_DIV  shift, and go to state 131
    OP_MOD  shift, and go to state 132

    $default  reduce using rule 82 (expr)

    mul_op  go to state 133


State 95

   86 term: factor .

    $default  reduce using rule 86 (term)


State 96

   90 factor: var_ref .
   98 var_ref: var_ref . dim

    MK_LB  shift, and go to state 105

    $default  reduce using rule 90 (factor)

    dim  go to state 106


State 97

   55 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 118
    MK_SEMICOLON  shift, and go to state 134


State 98

   56 simple_stmt: READ boolean_expr . MK_SEMICOLON
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 118
    MK_SEMICOLON  shift, and go to state 135


State 99

   62 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 118
    MK_SEMICOLON  shift, and go to state 136


State 100

   60 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 137
    OP_OR  shift, and go to state 118


State 101

   57 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    $default  reduce using rule 64 (opt_boolean_expr_list)

    int_const              go to state 39
    literal_const          go to state 88
    opt_boolean_expr_list  go to state 138
    boolean_expr_list      go to state 139
    boolean_expr           go to state 140
    boolean_term           go to state 90
    boolean_factor         go to state 91
    relop_expr             go to state 92
    expr                   go to state 93
    term                   go to state 94
    factor                 go to state 95
    var_ref                go to state 96


State 102

   49 compound_stmt: BEG opt_decl_list opt_stmt_list END .

    $default  reduce using rule 49 (compound_stmt)


State 103

   52 stmt_list: stmt_list stmt .

    $default  reduce using rule 52 (stmt_list)


State 104

   54 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 141
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 105

   99 dim: MK_LB . boolean_expr MK_RB

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 142
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 106

   98 var_ref: var_ref dim .

    $default  reduce using rule 98 (var_ref)


State 107

   41 array_type: ARRAY int_const TO int_const . OF type

    OF  shift, and go to state 143


State 108

   33 opt_type: MK_COLON type .

    $default  reduce using rule 33 (opt_type)


State 109

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON . compound_stmt END ID

    BEG  shift, and go to state 22

    compound_stmt  go to state 144


State 110

   61 for_stmt: FOR ID OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34

    int_const  go to state 145


State 111

   94 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    $default  reduce using rule 64 (opt_boolean_expr_list)

    int_const              go to state 39
    literal_const          go to state 88
    opt_boolean_expr_list  go to state 146
    boolean_expr_list      go to state 139
    boolean_expr           go to state 140
    boolean_term           go to state 90
    boolean_factor         go to state 91
    relop_expr             go to state 92
    expr                   go to state 93
    term                   go to state 94
    factor                 go to state 95
    var_ref                go to state 96


State 112

   95 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
   97 var_ref: ID .

    MK_LPAREN  shift, and go to state 147

    $default  reduce using rule 97 (var_ref)


State 113

   93 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 148
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 114

   91 factor: OP_SUB var_ref .
   98 var_ref: var_ref . dim

    MK_LB  shift, and go to state 105

    $default  reduce using rule 91 (factor)

    dim  go to state 106


State 115

   71 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 71 (boolean_factor)


State 116

   67 boolean_expr: boolean_expr . OP_OR boolean_term
   92 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 118
    MK_RPAREN  shift, and go to state 149


State 117

   58 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   59          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 51 (opt_stmt_list)

    stmt            go to state 65
    compound_stmt   go to state 66
    opt_stmt_list   go to state 150
    stmt_list       go to state 68
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 118

   67 boolean_expr: boolean_expr OP_OR . boolean_term

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_term    go to state 151
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 119

   69 boolean_term: boolean_term OP_AND . boolean_factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_factor  go to state 152
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 120

   83 add_op: OP_ADD .

    $default  reduce using rule 83 (add_op)


State 121

   84 add_op: OP_SUB .

    $default  reduce using rule 84 (add_op)


State 122

   77 rel_op: OP_EQ .

    $default  reduce using rule 77 (rel_op)


State 123

   80 rel_op: OP_NE .

    $default  reduce using rule 80 (rel_op)


State 124

   79 rel_op: OP_GT .

    $default  reduce using rule 79 (rel_op)


State 125

   75 rel_op: OP_LT .

    $default  reduce using rule 75 (rel_op)


State 126

   78 rel_op: OP_GE .

    $default  reduce using rule 78 (rel_op)


State 127

   76 rel_op: OP_LE .

    $default  reduce using rule 76 (rel_op)


State 128

   73 relop_expr: expr rel_op . expr

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    MK_LPAREN    shift, and go to state 87

    int_const      go to state 39
    literal_const  go to state 88
    expr           go to state 153
    term           go to state 94
    factor         go to state 95
    var_ref        go to state 96


State 129

   81 expr: expr add_op . term

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    MK_LPAREN    shift, and go to state 87

    int_const      go to state 39
    literal_const  go to state 88
    term           go to state 154
    factor         go to state 95
    var_ref        go to state 96


State 130

   87 mul_op: OP_MUL .

    $default  reduce using rule 87 (mul_op)


State 131

   88 mul_op: OP_DIV .

    $default  reduce using rule 88 (mul_op)


State 132

   89 mul_op: OP_MOD .

    $default  reduce using rule 89 (mul_op)


State 133

   85 term: term mul_op . factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    MK_LPAREN    shift, and go to state 87

    int_const      go to state 39
    literal_const  go to state 88
    factor         go to state 155
    var_ref        go to state 96


State 134

   55 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 55 (simple_stmt)


State 135

   56 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 56 (simple_stmt)


State 136

   62 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 62 (return_stmt)


State 137

   60 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 51 (opt_stmt_list)

    stmt            go to state 65
    compound_stmt   go to state 66
    opt_stmt_list   go to state 156
    stmt_list       go to state 68
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 138

   57 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 157


State 139

   63 opt_boolean_expr_list: boolean_expr_list .
   65 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 158

    $default  reduce using rule 63 (opt_boolean_expr_list)


State 140

   66 boolean_expr_list: boolean_expr .
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 118

    $default  reduce using rule 66 (boolean_expr_list)


State 141

   54 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 118
    MK_SEMICOLON  shift, and go to state 159


State 142

   67 boolean_expr: boolean_expr . OP_OR boolean_term
   99 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 118
    MK_RB  shift, and go to state 160


State 143

   41 array_type: ARRAY int_const TO int_const OF . type

    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 161
    scalar_type  go to state 81
    array_type   go to state 82


State 144

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt . END ID

    END  shift, and go to state 162


State 145

   61 for_stmt: FOR ID OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 163


State 146

   94 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 164


State 147

   95 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    $default  reduce using rule 64 (opt_boolean_expr_list)

    int_const              go to state 39
    literal_const          go to state 88
    opt_boolean_expr_list  go to state 165
    boolean_expr_list      go to state 139
    boolean_expr           go to state 140
    boolean_term           go to state 90
    boolean_factor         go to state 91
    relop_expr             go to state 92
    expr                   go to state 93
    term                   go to state 94
    factor                 go to state 95
    var_ref                go to state 96


State 148

   67 boolean_expr: boolean_expr . OP_OR boolean_term
   93 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 118
    MK_RPAREN  shift, and go to state 166


State 149

   92 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 92 (factor)


State 150

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   59          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 167
    END   shift, and go to state 168


State 151

   67 boolean_expr: boolean_expr OP_OR boolean_term .
   69 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 119

    $default  reduce using rule 67 (boolean_expr)


State 152

   69 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 69 (boolean_term)


State 153

   73 relop_expr: expr rel_op expr .
   81 expr: expr . add_op term

    OP_ADD  shift, and go to state 120
    OP_SUB  shift, and go to state 121

    $default  reduce using rule 73 (relop_expr)

    add_op  go to state 129


State 154

   81 expr: expr add_op term .
   85 term: term . mul_op factor

    OP_MUL  shift, and go to state 130
    OP_DIV  shift, and go to state 131
    OP_MOD  shift, and go to state 132

    $default  reduce using rule 81 (expr)

    mul_op  go to state 133


State 155

   85 term: term mul_op factor .

    $default  reduce using rule 85 (term)


State 156

   60 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 169


State 157

   57 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 170


State 158

   65 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    ID           shift, and go to state 84
    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37
    OP_SUB       shift, and go to state 85
    OP_NOT       shift, and go to state 86
    MK_LPAREN    shift, and go to state 87

    int_const       go to state 39
    literal_const   go to state 88
    boolean_expr    go to state 171
    boolean_term    go to state 90
    boolean_factor  go to state 91
    relop_expr      go to state 92
    expr            go to state 93
    term            go to state 94
    factor          go to state 95
    var_ref         go to state 96


State 159

   54 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 54 (simple_stmt)


State 160

   99 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 99 (dim)


State 161

   41 array_type: ARRAY int_const TO int_const OF type .

    $default  reduce using rule 41 (array_type)


State 162

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END . ID

    ID  shift, and go to state 172


State 163

   61 for_stmt: FOR ID OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 33
    INT_CONST    shift, and go to state 34

    int_const  go to state 173


State 164

   94 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 94 (factor)


State 165

   95 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 174


State 166

   93 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 93 (factor)


State 167

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 51 (opt_stmt_list)

    stmt            go to state 65
    compound_stmt   go to state 66
    opt_stmt_list   go to state 175
    stmt_list       go to state 68
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 168

   59 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 176


State 169

   60 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 177


State 170

   57 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 57 (proc_call_stmt)


State 171

   65 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   67 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 118

    $default  reduce using rule 65 (boolean_expr_list)


State 172

   25 func_decl: ID MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON compound_stmt END ID .

    $default  reduce using rule 25 (func_decl)


State 173

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 178


State 174

   95 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 95 (factor)


State 175

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 179


State 176

   59 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 59 (cond_stmt)


State 177

   60 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 60 (while_stmt)


State 178

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 22
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63
    ID      shift, and go to state 64

    $default  reduce using rule 51 (opt_stmt_list)

    stmt            go to state 65
    compound_stmt   go to state 66
    opt_stmt_list   go to state 180
    stmt_list       go to state 68
    simple_stmt     go to state 69
    proc_call_stmt  go to state 70
    cond_stmt       go to state 71
    while_stmt      go to state 72
    for_stmt        go to state 73
    return_stmt     go to state 74
    var_ref         go to state 75


State 179

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 181


State 180

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 182


State 181

   58 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 58 (cond_stmt)


State 182

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 183


State 183

   61 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 61 (for_stmt)
